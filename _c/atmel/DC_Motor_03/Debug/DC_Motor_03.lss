
DC_Motor_03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000c9  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000006b  00000000  00000000  000002bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000143  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  0000046c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000178  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_9>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_14>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__vector_19>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_9>:
#include <avr/interrupt.h>	// Interrupt definitionen einbinden
#include <util/delay.h>

// ISR bei Timer0 Überlauf
ISR(TIMER0_OVF_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
	OUTPUT = PWM_FORWARD;
  78:	8c e6       	ldi	r24, 0x6C	; 108
  7a:	85 bb       	out	0x15, r24	; 21
}
  7c:	8f 91       	pop	r24
  7e:	0f 90       	pop	r0
  80:	0f be       	out	0x3f, r0	; 63
  82:	0f 90       	pop	r0
  84:	1f 90       	pop	r1
  86:	18 95       	reti

00000088 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
  88:	1f 92       	push	r1
  8a:	0f 92       	push	r0
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	0f 92       	push	r0
  90:	11 24       	eor	r1, r1
  92:	8f 93       	push	r24
	if(OCR0 < 255)
  94:	8c b7       	in	r24, 0x3c	; 60
  96:	8f 3f       	cpi	r24, 0xFF	; 255
  98:	11 f0       	breq	.+4      	; 0x9e <__vector_19+0x16>
		OUTPUT = PWM_STOP;
  9a:	88 e4       	ldi	r24, 0x48	; 72
  9c:	85 bb       	out	0x15, r24	; 21
}
  9e:	8f 91       	pop	r24
  a0:	0f 90       	pop	r0
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	0f 90       	pop	r0
  a6:	1f 90       	pop	r1
  a8:	18 95       	reti

000000aa <__vector_14>:

ISR(ADC_vect)
{
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
  b4:	8f 93       	push	r24
	OCR0 = ADCH;
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	8c bf       	out	0x3c, r24	; 60
}
  ba:	8f 91       	pop	r24
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <main>:

// Hauptprogramm
int main(void)
{
	DDROUT = HIGH;		// Datenrichtungsregister auf Ausgang
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	84 bb       	out	0x14, r24	; 20
	DDRTIM = HIGH;		// Datenrichtungsregister PortB auf Ausgang
  ca:	87 bb       	out	0x17, r24	; 23
	DDRADC = LOW;		// Datenrichttungsregister auf Eingang
  cc:	1a ba       	out	0x1a, r1	; 26

	// Timer0 Interrupt Einstellungen
	TCCR0 |= (1<<CS01)  | (1<<CS00);	// Timer0 Vorteiler auf 1
  ce:	83 b7       	in	r24, 0x33	; 51
  d0:	83 60       	ori	r24, 0x03	; 3
  d2:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<WGM01) | (1<<WGM00);	// FastPWM einstellen
  d4:	83 b7       	in	r24, 0x33	; 51
  d6:	88 64       	ori	r24, 0x48	; 72
  d8:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<COM01);				// OC0 bei überlauf setzten bei Vergleich rücksetzen 
  da:	83 b7       	in	r24, 0x33	; 51
  dc:	80 62       	ori	r24, 0x20	; 32
  de:	83 bf       	out	0x33, r24	; 51

	TIMSK |= (1<<TOIE0) | (1<<OCIE0);	// Timer0 Overflow freigeben	
  e0:	89 b7       	in	r24, 0x39	; 57
  e2:	83 60       	ori	r24, 0x03	; 3
  e4:	89 bf       	out	0x39, r24	; 57
	OCR0 = 154;							// Tastverhältnis auf 60%
  e6:	8a e9       	ldi	r24, 0x9A	; 154
  e8:	8c bf       	out	0x3c, r24	; 60

	// Analog Einstellungen
	ADMUX = (1<<REFS0) | (1<<ADLAR) | (1<<MUX2) | (1<<MUX0);
  ea:	85 e6       	ldi	r24, 0x65	; 101
  ec:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
  ee:	8f ee       	ldi	r24, 0xEF	; 239
  f0:	86 b9       	out	0x06, r24	; 6

	sei();								// Interrupts global freigeben
  f2:	78 94       	sei

    while (1) 
    {
	}
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <main+0x2e>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
