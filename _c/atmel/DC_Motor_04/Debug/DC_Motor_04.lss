
DC_Motor_04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000148  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000001bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000e0  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000083  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000018f  00000000  00000000  000003c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000017f  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b4  00000000  00000000  00000757  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000080b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 77 00 	call	0xee	; 0xee <main>
  74:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_9>:
// Globale Variablen
volatile unsigned char STATUS;

// ISR bei Timer0 Überlauf
ISR(TIMER0_OVF_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
	if(STATUS == PWM_FORWARD)
  88:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  8c:	8c 36       	cpi	r24, 0x6C	; 108
  8e:	11 f4       	brne	.+4      	; 0x94 <__vector_9+0x18>
		OUTPUT = PWM_FORWARD;
  90:	85 bb       	out	0x15, r24	; 21
  92:	08 c0       	rjmp	.+16     	; 0xa4 <__vector_9+0x28>
	else if(STATUS == PWM_REVERSE)
  94:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  98:	88 3d       	cpi	r24, 0xD8	; 216
  9a:	11 f4       	brne	.+4      	; 0xa0 <__vector_9+0x24>
		OUTPUT = PWM_REVERSE;
  9c:	85 bb       	out	0x15, r24	; 21
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <__vector_9+0x28>
	else
		OUTPUT = PWM_STOP;
  a0:	88 e4       	ldi	r24, 0x48	; 72
  a2:	85 bb       	out	0x15, r24	; 21
	
}
  a4:	8f 91       	pop	r24
  a6:	0f 90       	pop	r0
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	0f 90       	pop	r0
  ac:	1f 90       	pop	r1
  ae:	18 95       	reti

000000b0 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	8f 93       	push	r24
	if(OCR0 < 255)
  bc:	8c b7       	in	r24, 0x3c	; 60
  be:	8f 3f       	cpi	r24, 0xFF	; 255
  c0:	11 f0       	breq	.+4      	; 0xc6 <__vector_19+0x16>
		OUTPUT = PWM_STOP;
  c2:	88 e4       	ldi	r24, 0x48	; 72
  c4:	85 bb       	out	0x15, r24	; 21
}
  c6:	8f 91       	pop	r24
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <__vector_14>:

ISR(ADC_vect)
{
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	8f 93       	push	r24
	OCR0 = ADCH;
  de:	85 b1       	in	r24, 0x05	; 5
  e0:	8c bf       	out	0x3c, r24	; 60
}
  e2:	8f 91       	pop	r24
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <main>:

// Hauptprogramm
int main(void)
{
	DDROUT = HIGH;		// Datenrichtungsregister auf Ausgang
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	84 bb       	out	0x14, r24	; 20
	DDRTIM = HIGH;		// Datenrichtungsregister PortB auf Ausgang
  f2:	87 bb       	out	0x17, r24	; 23
	DDRADC = LOW;		// Datenrichttungsregister auf Eingang
  f4:	1a ba       	out	0x1a, r1	; 26
	INPULL = 0x0F;		// Pullups an Taster aktivieren
  f6:	8f e0       	ldi	r24, 0x0F	; 15
  f8:	8b bb       	out	0x1b, r24	; 27

	// Timer0 Interrupt Einstellungen
	TCCR0 |= (1<<CS01)  | (1<<CS00);	// Timer0 Vorteiler auf 1
  fa:	83 b7       	in	r24, 0x33	; 51
  fc:	83 60       	ori	r24, 0x03	; 3
  fe:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<WGM01) | (1<<WGM00);	// FastPWM einstellen
 100:	83 b7       	in	r24, 0x33	; 51
 102:	88 64       	ori	r24, 0x48	; 72
 104:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<COM01);				// OC0 bei überlauf setzten bei Vergleich rücksetzen 
 106:	83 b7       	in	r24, 0x33	; 51
 108:	80 62       	ori	r24, 0x20	; 32
 10a:	83 bf       	out	0x33, r24	; 51

	TIMSK |= (1<<TOIE0) | (1<<OCIE0);	// Timer0 Overflow freigeben	
 10c:	89 b7       	in	r24, 0x39	; 57
 10e:	83 60       	ori	r24, 0x03	; 3
 110:	89 bf       	out	0x39, r24	; 57
	OCR0 = 154;							// Tastverhältnis auf 60%
 112:	8a e9       	ldi	r24, 0x9A	; 154
 114:	8c bf       	out	0x3c, r24	; 60

	// Analog Einstellungen
	ADMUX = (1<<REFS0) | (1<<ADLAR) | (1<<MUX2) | (1<<MUX0);
 116:	85 e6       	ldi	r24, 0x65	; 101
 118:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 11a:	8f ee       	ldi	r24, 0xEF	; 239
 11c:	86 b9       	out	0x06, r24	; 6

	sei();								// Interrupts global freigeben
 11e:	78 94       	sei
		if(!(INPUT & (1<<STOP)))
			STATUS = PWM_STOP;
		else if(!(INPUT & (1<<RIGHT)))
			STATUS = PWM_FORWARD;
		else if(!(INPUT & (1<<LEFT)))
			STATUS = PWM_REVERSE;
 120:	28 ed       	ldi	r18, 0xD8	; 216
    while (1) 
    {
		if(!(INPUT & (1<<STOP)))
			STATUS = PWM_STOP;
		else if(!(INPUT & (1<<RIGHT)))
			STATUS = PWM_FORWARD;
 122:	9c e6       	ldi	r25, 0x6C	; 108
	sei();								// Interrupts global freigeben

    while (1) 
    {
		if(!(INPUT & (1<<STOP)))
			STATUS = PWM_STOP;
 124:	88 e4       	ldi	r24, 0x48	; 72

	sei();								// Interrupts global freigeben

    while (1) 
    {
		if(!(INPUT & (1<<STOP)))
 126:	ca 99       	sbic	0x19, 2	; 25
 128:	03 c0       	rjmp	.+6      	; 0x130 <main+0x42>
			STATUS = PWM_STOP;
 12a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 12e:	fb cf       	rjmp	.-10     	; 0x126 <main+0x38>
		else if(!(INPUT & (1<<RIGHT)))
 130:	c8 99       	sbic	0x19, 0	; 25
 132:	03 c0       	rjmp	.+6      	; 0x13a <main+0x4c>
			STATUS = PWM_FORWARD;
 134:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <_edata>
 138:	f6 cf       	rjmp	.-20     	; 0x126 <main+0x38>
		else if(!(INPUT & (1<<LEFT)))
 13a:	c9 99       	sbic	0x19, 1	; 25
 13c:	f4 cf       	rjmp	.-24     	; 0x126 <main+0x38>
			STATUS = PWM_REVERSE;
 13e:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <_edata>
 142:	f1 cf       	rjmp	.-30     	; 0x126 <main+0x38>

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
