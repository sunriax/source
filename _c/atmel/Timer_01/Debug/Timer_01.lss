
Timer_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000152  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000b3  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000007c  00000000  00000000  0000029b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000f7  00000000  00000000  00000317  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  00000410  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000016e  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000056  00000000  00000000  000005ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  74:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_9>:
// Timer0 Einstellungen
#define DDROUT DDRC		// Output Register
#define OUTPUT PORTC	// Output Port

ISR(TIMER0_OVF_vect)			// Timer0 Interrupt Overflow
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	8f 93       	push	r24
  8a:	9f 93       	push	r25
	static int count_SW;		// Software Zähler initialisieren
	count_SW++;					// Software Zähler um 1 erhöhen
  8c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  90:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  94:	01 96       	adiw	r24, 0x01	; 1
	
	if(count_SW >= 23437)		// Software Zählerwert prüfen ob >= 23437
  96:	8d 38       	cpi	r24, 0x8D	; 141
  98:	2b e5       	ldi	r18, 0x5B	; 91
  9a:	92 07       	cpc	r25, r18
  9c:	2c f4       	brge	.+10     	; 0xa8 <__vector_9+0x2c>
#define OUTPUT PORTC	// Output Port

ISR(TIMER0_OVF_vect)			// Timer0 Interrupt Overflow
{
	static int count_SW;		// Software Zähler initialisieren
	count_SW++;					// Software Zähler um 1 erhöhen
  9e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  a6:	07 c0       	rjmp	.+14     	; 0xb6 <__vector_9+0x3a>
	
	if(count_SW >= 23437)		// Software Zählerwert prüfen ob >= 23437
	{
		count_SW = 0;			// Software Zählerwert Rücksetzen
  a8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  ac:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
		OUTPUT = ~(OUTPUT);		// Ausgang (LEDs) negieren (0xFF <-> 0x00)
  b0:	85 b3       	in	r24, 0x15	; 21
  b2:	80 95       	com	r24
  b4:	85 bb       	out	0x15, r24	; 21
	}
}
  b6:	9f 91       	pop	r25
  b8:	8f 91       	pop	r24
  ba:	2f 91       	pop	r18
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <main>:

int main(void)
{

	DDROUT  = HIGH;		// Datenrichtungsregister OUTPUT auf Ausgang
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	84 bb       	out	0x14, r24	; 20
	OUTPUT  = LOW;		// LEDs an OUTPUT auf Eingang
  ca:	15 ba       	out	0x15, r1	; 21

	// Timer0 Interrupts Register
	TCCR0 |= (1<<CS00);		// Timer0 Vorteiler (k(h)=1) einstellen
  cc:	83 b7       	in	r24, 0x33	; 51
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1<<TOIE0);		// Timer0 Interrupt freigeben
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	89 bf       	out	0x39, r24	; 57

	sei();					// Interrupts Global Freigeben
  d6:	78 94       	sei
	
    while (1) 
    {
		// Kein Programmcode vorhanden
    }
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <main+0x12>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
