
UART_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000015a  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000df  00000000  00000000  00000336  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000015f  00000000  00000000  00000415  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000192  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  0000076a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000007b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <uart_init>:

// UART initialisieren
void uart_init()	{
	unsigned int setubrr = UBRR;
	
	UCSRC &= ~(1<<URSEL);
  6c:	80 b5       	in	r24, 0x20	; 32
  6e:	8f 77       	andi	r24, 0x7F	; 127
  70:	80 bd       	out	0x20, r24	; 32
	UBRRH = (unsigned char)(setubrr>>8);	// Einstellung der Baudrate (Register High)
  72:	84 e0       	ldi	r24, 0x04	; 4
  74:	80 bd       	out	0x20, r24	; 32
	UBRRL = (unsigned char)(setubrr);		// Einstellung der Baudrate (Register Low)
  76:	81 ee       	ldi	r24, 0xE1	; 225
  78:	89 b9       	out	0x09, r24	; 9

#ifndef SAMPLE
	UCSRA &= ~(1<<U2X);						// Double Speed Mode ausschalten
  7a:	59 98       	cbi	0x0b, 1	; 11
#endif

	UCSRC  = (1<<URSEL) | (1<<USBS);		// Setzen der Stoppbits
  7c:	88 e8       	ldi	r24, 0x88	; 136
  7e:	80 bd       	out	0x20, r24	; 32
	UCSRC |= (1<<UCSZ1) | (1<<UCSZ0);		// Setzen der Datenbitanzahl
  80:	80 b5       	in	r24, 0x20	; 32
  82:	86 60       	ori	r24, 0x06	; 6
  84:	80 bd       	out	0x20, r24	; 32
	UCSRB  = (1<<RXCIE);					// Receiver Intrerrpt Freigeben
  86:	80 e8       	ldi	r24, 0x80	; 128
  88:	8a b9       	out	0x0a, r24	; 10
	UCSRB |= (1<<RXEN) | (1<<TXEN);			// Transmitter und Receivcer einschalten
  8a:	8a b1       	in	r24, 0x0a	; 10
  8c:	88 61       	ori	r24, 0x18	; 24
  8e:	8a b9       	out	0x0a, r24	; 10
  90:	08 95       	ret

00000092 <uart_putchar>:
}

// UART Routine Daten senden
void uart_putchar(unsigned char data)	{
	while(!(UCSRA & (1<<UDRE)));			// Warten bis Empfangsbuffer leer
  92:	5d 9b       	sbis	0x0b, 5	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <uart_putchar>
		UDR = data;											// Schreiben der Daten in Sendebuffer
  96:	8c b9       	out	0x0c, r24	; 12
  98:	08 95       	ret

0000009a <uart_getchar>:
}

// UART Routine Daten empfangen
void uart_getchar(unsigned char *address)	{
	if(UCSRA & (1<<RXC))	{				// Überprüfen ob Daten in Empfangsbuffer
  9a:	5f 9b       	sbis	0x0b, 7	; 11
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <uart_getchar+0xa>
		*address = UDR;						// Daten auf Addresse des adress pointers schreiben
  9e:	2c b1       	in	r18, 0x0c	; 12
  a0:	fc 01       	movw	r30, r24
  a2:	20 83       	st	Z, r18
  a4:	08 95       	ret

000000a6 <main>:
	}
}

int main(void)
{	
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	1f 92       	push	r1
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	unsigned char out;					// Ausgabevariable für Empfangenes Zeichen
	
	DDRIN = LOW;						// Datenrichtungsregister auf Eingang
  b0:	1a ba       	out	0x1a, r1	; 26
	INPULL = 0x0F;						// Pullup-Widerstände an Eingang aktivieren
  b2:	8f e0       	ldi	r24, 0x0F	; 15
  b4:	8b bb       	out	0x1b, r24	; 27

	DDROUT = HIGH;						// Datenrichtungsregister auf Ausgang
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	84 bb       	out	0x14, r24	; 20
	OUTPUT = LOW;						// PORTC Alle LEDs aus
  ba:	15 ba       	out	0x15, r1	; 21

	uart_init(UBRR);					// UART Initialisierungsroutine aufrufen
  bc:	61 ee       	ldi	r22, 0xE1	; 225
  be:	74 e0       	ldi	r23, 0x04	; 4
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 36 00 	call	0x6c	; 0x6c <uart_init>

    while (1) 
    {
		uart_getchar(&out);				// UART Zeichen empfangen
  c8:	ce 01       	movw	r24, r28
  ca:	01 96       	adiw	r24, 0x01	; 1
  cc:	0e 94 4d 00 	call	0x9a	; 0x9a <uart_getchar>
		uart_putchar(0x0F & ~(INPUT));	// UART Zeichen senden
  d0:	89 b3       	in	r24, 0x19	; 25
  d2:	80 95       	com	r24
  d4:	8f 70       	andi	r24, 0x0F	; 15
  d6:	0e 94 49 00 	call	0x92	; 0x92 <uart_putchar>
		OUTPUT = out;					// Empfangenes Zeichen auf PORTC ausgeben
  da:	89 81       	ldd	r24, Y+1	; 0x01
  dc:	85 bb       	out	0x15, r24	; 21
	}
  de:	f4 cf       	rjmp	.-24     	; 0xc8 <main+0x22>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
