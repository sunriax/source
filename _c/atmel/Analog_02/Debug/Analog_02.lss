
Analog_02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000009d  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000006b  00000000  00000000  00000239  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000fd  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000003a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000167  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003c  00000000  00000000  0000054f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000058b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_14>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 44 00 	call	0x88	; 0x88 <main>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_14>:
// I/O Einstellungen
#define DDROUT DDRC		// Output Register
#define OUTPUT PORTC	// Output Port

ISR(ADC_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
	OUTPUT = ADCH;
  78:	85 b1       	in	r24, 0x05	; 5
  7a:	85 bb       	out	0x15, r24	; 21
}
  7c:	8f 91       	pop	r24
  7e:	0f 90       	pop	r0
  80:	0f be       	out	0x3f, r0	; 63
  82:	0f 90       	pop	r0
  84:	1f 90       	pop	r1
  86:	18 95       	reti

00000088 <main>:

int main(void)
{
    DDROUT = HIGH;
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	84 bb       	out	0x14, r24	; 20
	OUTPUT = LOW;
  8c:	15 ba       	out	0x15, r1	; 21
 
 	ADMUX = 0x00;
  8e:	17 b8       	out	0x07, r1	; 7
 	ADMUX |= (1<<REFS0) | (1<<ADLAR);	// Referenzspannung auf AVCC
  90:	87 b1       	in	r24, 0x07	; 7
  92:	80 66       	ori	r24, 0x60	; 96
  94:	87 b9       	out	0x07, r24	; 7
										// Ausrichtung Links
	ADMUX |= (1<<MUX2) | (1<<MUX0);
  96:	87 b1       	in	r24, 0x07	; 7
  98:	85 60       	ori	r24, 0x05	; 5
  9a:	87 b9       	out	0x07, r24	; 7

	// Vorteiler einstellen
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
  9c:	86 b1       	in	r24, 0x06	; 6
  9e:	87 60       	ori	r24, 0x07	; 7
  a0:	86 b9       	out	0x06, r24	; 6
	// Wandlar Ein & Start und Dauerwandlung Ein
	ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADATE);
  a2:	86 b1       	in	r24, 0x06	; 6
  a4:	80 6e       	ori	r24, 0xE0	; 224
  a6:	86 b9       	out	0x06, r24	; 6

	ADCSRA |= (1<<ADIE);	// Interrupt individuell freigeben
  a8:	33 9a       	sbi	0x06, 3	; 6

	sei();	// Interrupt global freigeben
  aa:	78 94       	sei

	asm volatile ("nop");
  ac:	00 00       	nop
    
	while (1) 
    {
		
    }
  ae:	ff cf       	rjmp	.-2      	; 0xae <main+0x26>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>
