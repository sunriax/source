
Felder_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000166  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000166  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800076  00800076  00000210  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000167  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000009b  00000000  00000000  00000403  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000137  00000000  00000000  0000049e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000181  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  0000078d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000007d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e6       	ldi	r30, 0x66	; 102
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
unsigned char vector[]={1,2,3,4,5};	//eindimensionale Feldvariable mit Initialisierung
unsigned char string[]="1,2,3,4,5";	//String (9 Zeichen und abschließende 0)		
unsigned char matrix[2][3] = \
 { {0x11,0x22,0x33},{0x44,0x55,0x66} }; //zweidimensionale Feldvariable vereinbaren und vorbelegen
int main(void) 
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x6>
  98:	1f 92       	push	r1
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  for (unsigned char i=0; i<N; i++) //Zählschleife für Index
  9e:	19 82       	std	Y+1, r1	; 0x01
  a0:	12 c0       	rjmp	.+36     	; 0xc6 <main+0x34>
    tabelle[i]=0xFFFF-i; //Feldelement belegen
  a2:	89 81       	ldd	r24, Y+1	; 0x01
  a4:	88 2f       	mov	r24, r24
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	29 81       	ldd	r18, Y+1	; 0x01
  aa:	22 2f       	mov	r18, r18
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	20 95       	com	r18
  b0:	30 95       	com	r19
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	8a 58       	subi	r24, 0x8A	; 138
  b8:	9f 4f       	sbci	r25, 0xFF	; 255
  ba:	fc 01       	movw	r30, r24
  bc:	31 83       	std	Z+1, r19	; 0x01
  be:	20 83       	st	Z, r18
unsigned char string[]="1,2,3,4,5";	//String (9 Zeichen und abschließende 0)		
unsigned char matrix[2][3] = \
 { {0x11,0x22,0x33},{0x44,0x55,0x66} }; //zweidimensionale Feldvariable vereinbaren und vorbelegen
int main(void) 
{
  for (unsigned char i=0; i<N; i++) //Zählschleife für Index
  c0:	89 81       	ldd	r24, Y+1	; 0x01
  c2:	8f 5f       	subi	r24, 0xFF	; 255
  c4:	89 83       	std	Y+1, r24	; 0x01
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	84 30       	cpi	r24, 0x04	; 4
  ca:	58 f3       	brcs	.-42     	; 0xa2 <main+0x10>
    tabelle[i]=0xFFFF-i; //Feldelement belegen

  PORTA=sizeof(tabelle); //Feldgröße=4x2=8Byte
  cc:	8b e3       	ldi	r24, 0x3B	; 59
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	28 e0       	ldi	r18, 0x08	; 8
  d2:	fc 01       	movw	r30, r24
  d4:	20 83       	st	Z, r18
  PORTB=tabelle[1]; //LSByte ins Datenregister für PortB schreiben
  d6:	88 e3       	ldi	r24, 0x38	; 56
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__data_end+0x2>
  de:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__data_end+0x3>
  e2:	fc 01       	movw	r30, r24
  e4:	20 83       	st	Z, r18
  PORTC=tabelle[1]>>8; //MSByte ins Datenregister für PortC schreiben   
  e6:	85 e3       	ldi	r24, 0x35	; 53
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__data_end+0x2>
  ee:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__data_end+0x3>
  f2:	23 2f       	mov	r18, r19
  f4:	33 27       	eor	r19, r19
  f6:	fc 01       	movw	r30, r24
  f8:	20 83       	st	Z, r18
  
  vector[0]='H';  //Zeichen 'H' = ACSII Code 0x48 
  fa:	88 e4       	ldi	r24, 0x48	; 72
  fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
  string[0]=0x7A; //ASCII Code 0x7A = Zeichen 'z'
 100:	8a e7       	ldi	r24, 0x7A	; 122
 102:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <string>
  vector[4]=sizeof(string); //Stringlänge=10 (einschließlich abschließende 0)
 106:	8a e0       	ldi	r24, 0x0A	; 10
 108:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_start+0x4>
  
  PORTD=sizeof(matrix); //Feldgröße=2x3=6Byte
 10c:	82 e3       	ldi	r24, 0x32	; 50
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	26 e0       	ldi	r18, 0x06	; 6
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
  for (unsigned char i=0;i<2;i++)   //Zeilenindex
 116:	1a 82       	std	Y+2, r1	; 0x02
 118:	20 c0       	rjmp	.+64     	; 0x15a <main+0xc8>
    for (unsigned char j=0;j<3;j++) //Spaltenindex 
 11a:	1b 82       	std	Y+3, r1	; 0x03
 11c:	18 c0       	rjmp	.+48     	; 0x14e <main+0xbc>
	   matrix[i][j]=i+j; //Matrixelement neu belegen
 11e:	8a 81       	ldd	r24, Y+2	; 0x02
 120:	28 2f       	mov	r18, r24
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	8b 81       	ldd	r24, Y+3	; 0x03
 126:	48 2f       	mov	r20, r24
 128:	50 e0       	ldi	r21, 0x00	; 0
 12a:	9a 81       	ldd	r25, Y+2	; 0x02
 12c:	8b 81       	ldd	r24, Y+3	; 0x03
 12e:	69 2f       	mov	r22, r25
 130:	68 0f       	add	r22, r24
 132:	c9 01       	movw	r24, r18
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	82 0f       	add	r24, r18
 13a:	93 1f       	adc	r25, r19
 13c:	84 0f       	add	r24, r20
 13e:	95 1f       	adc	r25, r21
 140:	81 59       	subi	r24, 0x91	; 145
 142:	9f 4f       	sbci	r25, 0xFF	; 255
 144:	fc 01       	movw	r30, r24
 146:	60 83       	st	Z, r22
  string[0]=0x7A; //ASCII Code 0x7A = Zeichen 'z'
  vector[4]=sizeof(string); //Stringlänge=10 (einschließlich abschließende 0)
  
  PORTD=sizeof(matrix); //Feldgröße=2x3=6Byte
  for (unsigned char i=0;i<2;i++)   //Zeilenindex
    for (unsigned char j=0;j<3;j++) //Spaltenindex 
 148:	8b 81       	ldd	r24, Y+3	; 0x03
 14a:	8f 5f       	subi	r24, 0xFF	; 255
 14c:	8b 83       	std	Y+3, r24	; 0x03
 14e:	8b 81       	ldd	r24, Y+3	; 0x03
 150:	83 30       	cpi	r24, 0x03	; 3
 152:	28 f3       	brcs	.-54     	; 0x11e <main+0x8c>
  vector[0]='H';  //Zeichen 'H' = ACSII Code 0x48 
  string[0]=0x7A; //ASCII Code 0x7A = Zeichen 'z'
  vector[4]=sizeof(string); //Stringlänge=10 (einschließlich abschließende 0)
  
  PORTD=sizeof(matrix); //Feldgröße=2x3=6Byte
  for (unsigned char i=0;i<2;i++)   //Zeilenindex
 154:	8a 81       	ldd	r24, Y+2	; 0x02
 156:	8f 5f       	subi	r24, 0xFF	; 255
 158:	8a 83       	std	Y+2, r24	; 0x02
 15a:	8a 81       	ldd	r24, Y+2	; 0x02
 15c:	82 30       	cpi	r24, 0x02	; 2
 15e:	e8 f2       	brcs	.-70     	; 0x11a <main+0x88>
    for (unsigned char j=0;j<3;j++) //Spaltenindex 
	   matrix[i][j]=i+j; //Matrixelement neu belegen
  
  while(1) {;} //verhindert hinauslaufen aus main
 160:	ff cf       	rjmp	.-2      	; 0x160 <main+0xce>

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
