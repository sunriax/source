
Analog_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000007e4  00000878  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800070  00800070  00000888  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f52  00000000  00000000  000009ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000525  00000000  00000000  000018fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000835  00000000  00000000  00001e23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  00002658  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002e1  00000000  00000000  000028a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fe3  00000000  00000000  00002b81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003b64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	1b 01       	movw	r2, r22
  56:	1d 01       	movw	r2, r26
  58:	1f 01       	movw	r2, r30
  5a:	23 01       	movw	r4, r6
  5c:	25 01       	movw	r4, r10
  5e:	29 01       	movw	r4, r18
  60:	2d 01       	movw	r4, r26

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d4 e0       	ldi	r29, 0x04	; 4
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
  6e:	10 e0       	ldi	r17, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	e4 ee       	ldi	r30, 0xE4	; 228
  76:	f7 e0       	ldi	r31, 0x07	; 7
  78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
  7a:	05 90       	lpm	r0, Z+
  7c:	0d 92       	st	X+, r0
  7e:	a0 37       	cpi	r26, 0x70	; 112
  80:	b1 07       	cpc	r27, r17
  82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	a0 e7       	ldi	r26, 0x70	; 112
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a4 37       	cpi	r26, 0x74	; 116
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 68 01 	call	0x2d0	; 0x2d0 <main>
  98:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <lcd_zToLCD>:
*************************************************************/
{
	//char D=0;

	//LCD_PORT = 1<< EN;
	PORTA|=1<< EN;
  a0:	dc 9a       	sbi	0x1b, 4	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	e7 e5       	ldi	r30, 0x57	; 87
  a4:	f2 e0       	ldi	r31, 0x02	; 2
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <lcd_zToLCD+0x6>
  aa:	00 c0       	rjmp	.+0      	; 0xac <lcd_zToLCD+0xc>
  ac:	00 00       	nop

	_delay_ms(WAIT_0);	

	PORTA&=~ (1<<RS);
  ae:	de 98       	cbi	0x1b, 6	; 27
	PORTB&=~(1<<DB4 | 1<<DB5 | 1<<DB6 | 1<<DB7);
  b0:	98 b3       	in	r25, 0x18	; 24
  b2:	9b 71       	andi	r25, 0x1B	; 27
  b4:	98 bb       	out	0x18, r25	; 24
	
	if (dataD & 0x01) PORTB|=1<<DB4;;
  b6:	80 fd       	sbrc	r24, 0
  b8:	c2 9a       	sbi	0x18, 2	; 24
	if (dataD & 0x02) PORTB|=1<<DB5;
  ba:	81 fd       	sbrc	r24, 1
  bc:	c5 9a       	sbi	0x18, 5	; 24
	if (dataD & 0x04) PORTB|=1<<DB6;
  be:	82 fd       	sbrc	r24, 2
  c0:	c6 9a       	sbi	0x18, 6	; 24
	if (dataD & 0x08) PORTB|=1<<DB7;
  c2:	83 fd       	sbrc	r24, 3
  c4:	c7 9a       	sbi	0x18, 7	; 24
	if (dataD & 0x10) PORTA|=1<<RS; 
  c6:	84 fd       	sbrc	r24, 4
  c8:	de 9a       	sbi	0x1b, 6	; 27

	//LCD_PORT &= ~(1<< EN);
	PORTA &= ~(1<< EN);
  ca:	dc 98       	cbi	0x1b, 4	; 27
  cc:	87 e5       	ldi	r24, 0x57	; 87
  ce:	92 e0       	ldi	r25, 0x02	; 2
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_zToLCD+0x30>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <lcd_zToLCD+0x36>
  d6:	00 00       	nop
  d8:	08 95       	ret

000000da <lcd_home>:
  da:	8f e5       	ldi	r24, 0x5F	; 95
  dc:	9a ee       	ldi	r25, 0xEA	; 234
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <lcd_home+0x4>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcd_home+0xa>
  e4:	00 00       	nop
setzt den Adresszaehler des DD-RAM auf Adresse 0. Der Inhalt des DD-RAMS
bleibt unveraendert. Der Cursor wird auf die erste Position der ersten
Zeile gesetzt.
*************************************************************/
{
	_delay_ms(WAIT_2);	lcd_zToLCD(0x00);      	// LCD-Return-Home 1
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_zToLCD>
  ec:	8f e5       	ldi	r24, 0x5F	; 95
  ee:	9a ee       	ldi	r25, 0xEA	; 234
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcd_home+0x16>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <lcd_home+0x1c>
  f6:	00 00       	nop
	_delay_ms(WAIT_2);	lcd_zToLCD(0x02);       // LCD-Return-Home 2
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_zToLCD>
  fe:	08 95       	ret

00000100 <lcd_init>:
*************************************************************/
{
	//LCD_DDR |= 1<<RS | 1<<RW | 1<<EN | 1<<VEE | 1<<DB7 | 1<<DB6 | 1<<DB5 | 1<<DB4;
	//LCD_DDR |= 1<<RS | 1<<EN | 1<<DB7 | 1<<DB6 | 1<<DB5 | 1<<DB4;

	DDRA|= 1<<RS | 1<<EN ;
 100:	8a b3       	in	r24, 0x1a	; 26
 102:	80 65       	ori	r24, 0x50	; 80
 104:	8a bb       	out	0x1a, r24	; 26
	DDRB|= 1<<DB7 | 1<<DB6 | 1<<DB5 | 1<<DB4;
 106:	87 b3       	in	r24, 0x17	; 23
 108:	84 6e       	ori	r24, 0xE4	; 228
 10a:	87 bb       	out	0x17, r24	; 23
 10c:	8f e5       	ldi	r24, 0x5F	; 95
 10e:	9a ee       	ldi	r25, 0xEA	; 234
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_init+0x10>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_init+0x16>
 116:	00 00       	nop

	_delay_ms(20);
	lcd_zToLCD(0x03);       // Function Set A
 118:	83 e0       	ldi	r24, 0x03	; 3
 11a:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_zToLCD>
 11e:	8f e2       	ldi	r24, 0x2F	; 47
 120:	95 e7       	ldi	r25, 0x75	; 117
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <lcd_init+0x22>
 126:	00 c0       	rjmp	.+0      	; 0x128 <lcd_init+0x28>
 128:	00 00       	nop
	_delay_ms(10);
	lcd_zToLCD(0x43);       // Function Set B
 12a:	83 e4       	ldi	r24, 0x43	; 67
 12c:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_zToLCD>
 130:	87 eb       	ldi	r24, 0xB7	; 183
 132:	9b e0       	ldi	r25, 0x0B	; 11
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <lcd_init+0x34>
 138:	00 c0       	rjmp	.+0      	; 0x13a <lcd_init+0x3a>
 13a:	00 00       	nop
	_delay_ms(1);	
	lcd_zToLCD(0x03);       // Function Set C
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_zToLCD>

	lcd_zToLCD(0x02);       // Function Set D
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_zToLCD>
	
	lcd_zToLCD(0x02);       // Funktion Set High Byte
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_zToLCD>
	lcd_zToLCD(0x08);       // Funktion Set Low Byte
 14e:	88 e0       	ldi	r24, 0x08	; 8
 150:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_zToLCD>
	
	lcd_zToLCD(0x00);       // Display On High Byte
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_zToLCD>
	lcd_zToLCD(0x0C);       // Display On Low Byte	
 15a:	8c e0       	ldi	r24, 0x0C	; 12
 15c:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Display Clear High Byte
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_zToLCD>
	lcd_zToLCD(0x01);       // Display Clear Low Byte	
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Entry Mode Set High Byte
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_zToLCD>
	lcd_zToLCD(0x06);       // Entry Mode Set Low Byte
 172:	86 e0       	ldi	r24, 0x06	; 6
 174:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_zToLCD>
 178:	87 eb       	ldi	r24, 0xB7	; 183
 17a:	9b e0       	ldi	r25, 0x0B	; 11
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <lcd_init+0x7c>
 180:	00 c0       	rjmp	.+0      	; 0x182 <lcd_init+0x82>
 182:	00 00       	nop
	_delay_ms(1);

	lcd_home();
 184:	0e 94 6d 00 	call	0xda	; 0xda <lcd_home>
	init_printf(NULL,my_putc);
 188:	6b ec       	ldi	r22, 0xCB	; 203
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 a6 03 	call	0x74c	; 0x74c <init_printf>
 194:	08 95       	ret

00000196 <my_putc>:
	_delay_us(200);         //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
}

void my_putc ( void* p, char c)
{
 196:	cf 93       	push	r28
 198:	c6 2f       	mov	r28, r22
	//unsigned char Zeichen;
	char Zeichen;
	
	Zeichen = c;
	Zeichen>>=4;
 19a:	86 2f       	mov	r24, r22
 19c:	82 95       	swap	r24
 19e:	8f 70       	andi	r24, 0x0F	; 15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a0:	e7 e5       	ldi	r30, 0x57	; 87
 1a2:	f2 e0       	ldi	r31, 0x02	; 2
 1a4:	31 97       	sbiw	r30, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <my_putc+0xe>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <my_putc+0x14>
 1aa:	00 00       	nop
	Zeichen|=0x10;
	_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe High Bytes
 1ac:	80 61       	ori	r24, 0x10	; 16
 1ae:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_zToLCD>
	Zeichen = c;
	Zeichen&=0x0f;
 1b2:	8c 2f       	mov	r24, r28
 1b4:	8f 70       	andi	r24, 0x0F	; 15
 1b6:	e7 e5       	ldi	r30, 0x57	; 87
 1b8:	f2 e0       	ldi	r31, 0x02	; 2
 1ba:	31 97       	sbiw	r30, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <my_putc+0x24>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <my_putc+0x2a>
 1c0:	00 00       	nop
	Zeichen|=0x10;
	_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe Low Byte
 1c2:	80 61       	ori	r24, 0x10	; 16
 1c4:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_zToLCD>
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <lcd_pos>:

Die 1. Zeile beginnt mit der DD-Adresse 0x00.
Die 2. Zeile beginnt mit der DD-Adresse 0x40.
*****************************************************************/
void lcd_pos(unsigned char zeile, unsigned char Pos)
{
 1cc:	cf 93       	push	r28
 1ce:	c6 2f       	mov	r28, r22
	unsigned char Zeichen;

	if (zeile) Pos+=0x40;	
 1d0:	81 11       	cpse	r24, r1
 1d2:	c0 5c       	subi	r28, 0xC0	; 192
  	Zeichen=Pos;			//Ausgabe der DD-Ram-Adresse
	Zeichen>>=4;
 1d4:	8c 2f       	mov	r24, r28
 1d6:	82 95       	swap	r24
 1d8:	8f 70       	andi	r24, 0x0F	; 15
 1da:	e7 e5       	ldi	r30, 0x57	; 87
 1dc:	f2 e0       	ldi	r31, 0x02	; 2
 1de:	31 97       	sbiw	r30, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <lcd_pos+0x12>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <lcd_pos+0x18>
 1e4:	00 00       	nop
	Zeichen|=0x08;		
	_delay_us(200);         //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe High Bytes
 1e6:	88 60       	ori	r24, 0x08	; 8
 1e8:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_zToLCD>
 1ec:	87 e5       	ldi	r24, 0x57	; 87
 1ee:	92 e0       	ldi	r25, 0x02	; 2
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_pos+0x24>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <lcd_pos+0x2a>
 1f6:	00 00       	nop
	Zeichen=Pos;
	Zeichen&=0x0F;	
	_delay_us(200);         //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
 1f8:	8c 2f       	mov	r24, r28
 1fa:	8f 70       	andi	r24, 0x0F	; 15
 1fc:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_zToLCD>
}
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <ADC_SingleRead>:
#define DDROUT DDRC		// Output Register
#define OUTPUT PORTC	// Output Port


unsigned char ADC_SingleRead(unsigned char channel)
{
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
 20c:	c4 56       	subi	r28, 0x64	; 100
 20e:	d1 09       	sbc	r29, r1
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	f8 94       	cli
 214:	de bf       	out	0x3e, r29	; 62
 216:	0f be       	out	0x3f, r0	; 63
 218:	cd bf       	out	0x3d, r28	; 61
	unsigned char buffer[100];
	unsigned int result = 0;

	ADMUX = 0x00;
 21a:	17 b8       	out	0x07, r1	; 7
	ADMUX |= (1<<REFS0) | (1<<ADLAR);	// Referenzspannung auf AVCC
 21c:	97 b1       	in	r25, 0x07	; 7
 21e:	90 66       	ori	r25, 0x60	; 96
 220:	97 b9       	out	0x07, r25	; 7
										// Ausrichtung Links
	// Kanal Auswahl
	switch(channel)
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	fc 01       	movw	r30, r24
 226:	31 97       	sbiw	r30, 0x01	; 1
 228:	e7 30       	cpi	r30, 0x07	; 7
 22a:	f1 05       	cpc	r31, r1
 22c:	d0 f4       	brcc	.+52     	; 0x262 <ADC_SingleRead+0x5e>
 22e:	e6 5d       	subi	r30, 0xD6	; 214
 230:	ff 4f       	sbci	r31, 0xFF	; 255
 232:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <__tablejump2__>
	{
		case 1	:	ADMUX |=   (1<<MUX0);							break;	// Kanal 1 einstellen
 236:	38 9a       	sbi	0x07, 0	; 7
 238:	17 c0       	rjmp	.+46     	; 0x268 <ADC_SingleRead+0x64>
		case 2	:	ADMUX |=   (1<<MUX1);							break;	// Kanal 2 einstellen
 23a:	39 9a       	sbi	0x07, 1	; 7
 23c:	15 c0       	rjmp	.+42     	; 0x268 <ADC_SingleRead+0x64>
		case 3	:	ADMUX |=   (1<<MUX1) | (1<<MUX0);				break;	// Kanal 3 einstellen
 23e:	87 b1       	in	r24, 0x07	; 7
 240:	83 60       	ori	r24, 0x03	; 3
 242:	87 b9       	out	0x07, r24	; 7
 244:	11 c0       	rjmp	.+34     	; 0x268 <ADC_SingleRead+0x64>
		case 4	:	ADMUX |=   (1<<MUX2);							break;	// Kanal 4 einstellen
 246:	3a 9a       	sbi	0x07, 2	; 7
 248:	0f c0       	rjmp	.+30     	; 0x268 <ADC_SingleRead+0x64>
		case 5	:	ADMUX |=   (1<<MUX2) | (1<<MUX0);				break;	// Kanal 5 einstellen
 24a:	87 b1       	in	r24, 0x07	; 7
 24c:	85 60       	ori	r24, 0x05	; 5
 24e:	87 b9       	out	0x07, r24	; 7
 250:	0b c0       	rjmp	.+22     	; 0x268 <ADC_SingleRead+0x64>
		case 6	:	ADMUX |=   (1<<MUX2) | (1<<MUX1);				break;	// Kanal 6 einstellen
 252:	87 b1       	in	r24, 0x07	; 7
 254:	86 60       	ori	r24, 0x06	; 6
 256:	87 b9       	out	0x07, r24	; 7
 258:	07 c0       	rjmp	.+14     	; 0x268 <ADC_SingleRead+0x64>
		case 7	:	ADMUX |=   (1<<MUX2) | (1<<MUX1) | (1<<MUX0);	break;	// Kanal 7 einstellen
 25a:	87 b1       	in	r24, 0x07	; 7
 25c:	87 60       	ori	r24, 0x07	; 7
 25e:	87 b9       	out	0x07, r24	; 7
 260:	03 c0       	rjmp	.+6      	; 0x268 <ADC_SingleRead+0x64>
		default	:	ADMUX &= ~((1<<MUX2) | (1<<MUX1) | (1<<MUX0));	break;	// Kanal 0 (Defaultwert)
 262:	87 b1       	in	r24, 0x07	; 7
 264:	88 7f       	andi	r24, 0xF8	; 248
 266:	87 b9       	out	0x07, r24	; 7
	}

	// Vorteiler einstellen
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 268:	86 b1       	in	r24, 0x06	; 6
 26a:	87 60       	ori	r24, 0x07	; 7
 26c:	86 b9       	out	0x06, r24	; 6

	// Betriebsmodus Einzelwandlung
	ADCSRA &= ~(1<<ADATE);
 26e:	35 98       	cbi	0x06, 5	; 6

	// Wandlar aktivieren
	ADCSRA |= (1<<ADEN);
 270:	37 9a       	sbi	0x06, 7	; 6
 272:	fe 01       	movw	r30, r28
 274:	31 96       	adiw	r30, 0x01	; 1
 276:	9e 01       	movw	r18, r28
 278:	2b 59       	subi	r18, 0x9B	; 155
 27a:	3f 4f       	sbci	r19, 0xFF	; 255
 27c:	df 01       	movw	r26, r30

	for(unsigned char i=0; i < sizeof(buffer); i++)
	{
			// Wandlung starten
			ADCSRA |= (1<<ADSC);
 27e:	36 9a       	sbi	0x06, 6	; 6

			// Warten bis Wandler fertig
			while(ADCSRA & (1<<ADSC))
 280:	36 9b       	sbis	0x06, 6	; 6
 282:	03 c0       	rjmp	.+6      	; 0x28a <ADC_SingleRead+0x86>
			{
				asm volatile ("nop");
 284:	00 00       	nop
	{
			// Wandlung starten
			ADCSRA |= (1<<ADSC);

			// Warten bis Wandler fertig
			while(ADCSRA & (1<<ADSC))
 286:	36 99       	sbic	0x06, 6	; 6
 288:	fd cf       	rjmp	.-6      	; 0x284 <ADC_SingleRead+0x80>
			{
				asm volatile ("nop");
			}

			buffer[i] = ADCH;
 28a:	85 b1       	in	r24, 0x05	; 5
 28c:	8d 93       	st	X+, r24
	ADCSRA &= ~(1<<ADATE);

	// Wandlar aktivieren
	ADCSRA |= (1<<ADEN);

	for(unsigned char i=0; i < sizeof(buffer); i++)
 28e:	a2 17       	cp	r26, r18
 290:	b3 07       	cpc	r27, r19
 292:	a9 f7       	brne	.-22     	; 0x27e <ADC_SingleRead+0x7a>

			buffer[i] = ADCH;
	}

	// Wandler Ausschalten
	ADCSRA &= ~(1<<ADEN);
 294:	37 98       	cbi	0x06, 7	; 6


unsigned char ADC_SingleRead(unsigned char channel)
{
	unsigned char buffer[100];
	unsigned int result = 0;
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	90 e0       	ldi	r25, 0x00	; 0
	ADCSRA &= ~(1<<ADEN);

	// Mittelwert berechnen
	for(unsigned char i=0; i < sizeof(buffer); i++)
	{
		result += buffer[i];
 29a:	41 91       	ld	r20, Z+
 29c:	84 0f       	add	r24, r20
 29e:	91 1d       	adc	r25, r1

	// Wandler Ausschalten
	ADCSRA &= ~(1<<ADEN);

	// Mittelwert berechnen
	for(unsigned char i=0; i < sizeof(buffer); i++)
 2a0:	2e 17       	cp	r18, r30
 2a2:	3f 07       	cpc	r19, r31
 2a4:	d1 f7       	brne	.-12     	; 0x29a <ADC_SingleRead+0x96>
	{
		result += buffer[i];
	}
	result = result / sizeof(buffer);
 2a6:	9c 01       	movw	r18, r24
 2a8:	36 95       	lsr	r19
 2aa:	27 95       	ror	r18
 2ac:	36 95       	lsr	r19
 2ae:	27 95       	ror	r18
 2b0:	ab e7       	ldi	r26, 0x7B	; 123
 2b2:	b4 e1       	ldi	r27, 0x14	; 20
 2b4:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__umulhisi3>
 2b8:	96 95       	lsr	r25
 2ba:	87 95       	ror	r24

	return result;
}
 2bc:	cc 59       	subi	r28, 0x9C	; 156
 2be:	df 4f       	sbci	r29, 0xFF	; 255
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	f8 94       	cli
 2c4:	de bf       	out	0x3e, r29	; 62
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	cd bf       	out	0x3d, r28	; 61
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <main>:
int main(void)
{
	unsigned char adcread;
	unsigned int calc;

	lcd_init();
 2d0:	0e 94 80 00 	call	0x100	; 0x100 <lcd_init>
	lcd_pos(0,0);
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_pos>
	printf("Analog_01");
 2dc:	80 e6       	ldi	r24, 0x60	; 96
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	9f 93       	push	r25
 2e2:	8f 93       	push	r24
 2e4:	0e 94 af 03 	call	0x75e	; 0x75e <tfp_printf>

    DDROUT = HIGH;
 2e8:	8f ef       	ldi	r24, 0xFF	; 255
 2ea:	84 bb       	out	0x14, r24	; 20
	OUTPUT = LOW;
 2ec:	15 ba       	out	0x15, r1	; 21
 2ee:	0f 90       	pop	r0
 2f0:	0f 90       	pop	r0
	OUTPUT = adcread;

	calc = 5 * adcread/256;

	lcd_pos(1,0);
	printf("U=%5u",calc);
 2f2:	0a e6       	ldi	r16, 0x6A	; 106
 2f4:	10 e0       	ldi	r17, 0x00	; 0
    DDROUT = HIGH;
	OUTPUT = LOW;
    
	while (1) 
    {
	adcread = ADC_SingleRead(5);
 2f6:	85 e0       	ldi	r24, 0x05	; 5
 2f8:	0e 94 02 01 	call	0x204	; 0x204 <ADC_SingleRead>
 2fc:	c8 2f       	mov	r28, r24
	OUTPUT = adcread;
 2fe:	85 bb       	out	0x15, r24	; 21

	calc = 5 * adcread/256;

	lcd_pos(1,0);
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_pos>
	while (1) 
    {
	adcread = ADC_SingleRead(5);
	OUTPUT = adcread;

	calc = 5 * adcread/256;
 308:	8c 2f       	mov	r24, r28
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	9c 01       	movw	r18, r24
 30e:	22 0f       	add	r18, r18
 310:	33 1f       	adc	r19, r19
 312:	22 0f       	add	r18, r18
 314:	33 1f       	adc	r19, r19
 316:	82 0f       	add	r24, r18
 318:	93 1f       	adc	r25, r19
 31a:	89 2f       	mov	r24, r25
 31c:	88 0f       	add	r24, r24
 31e:	88 0b       	sbc	r24, r24

	lcd_pos(1,0);
	printf("U=%5u",calc);
 320:	8f 93       	push	r24
 322:	9f 93       	push	r25
 324:	1f 93       	push	r17
 326:	0f 93       	push	r16
 328:	0e 94 af 03 	call	0x75e	; 0x75e <tfp_printf>
    }
 32c:	0f 90       	pop	r0
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	0f 90       	pop	r0
 334:	e0 cf       	rjmp	.-64     	; 0x2f6 <main+0x26>

00000336 <ui2a>:
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
 336:	8f 92       	push	r8
 338:	9f 92       	push	r9
 33a:	af 92       	push	r10
 33c:	bf 92       	push	r11
 33e:	cf 92       	push	r12
 340:	df 92       	push	r13
 342:	ef 92       	push	r14
 344:	ff 92       	push	r15
 346:	0f 93       	push	r16
 348:	1f 93       	push	r17
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	ec 01       	movw	r28, r24
 350:	8b 01       	movw	r16, r22
 352:	5a 01       	movw	r10, r20
 354:	79 01       	movw	r14, r18
 356:	86 17       	cp	r24, r22
 358:	97 07       	cpc	r25, r23
 35a:	a0 f0       	brcs	.+40     	; 0x384 <ui2a+0x4e>
 35c:	e1 e0       	ldi	r30, 0x01	; 1
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	cf 01       	movw	r24, r30
 362:	80 9f       	mul	r24, r16
 364:	f0 01       	movw	r30, r0
 366:	81 9f       	mul	r24, r17
 368:	f0 0d       	add	r31, r0
 36a:	90 9f       	mul	r25, r16
 36c:	f0 0d       	add	r31, r0
 36e:	11 24       	eor	r1, r1
 370:	ce 01       	movw	r24, r28
 372:	bf 01       	movw	r22, r30
 374:	0e 94 c7 03 	call	0x78e	; 0x78e <__udivmodhi4>
 378:	60 17       	cp	r22, r16
 37a:	71 07       	cpc	r23, r17
 37c:	88 f7       	brcc	.-30     	; 0x360 <ui2a+0x2a>
 37e:	30 97       	sbiw	r30, 0x00	; 0
 380:	19 f4       	brne	.+6      	; 0x388 <ui2a+0x52>
 382:	37 c0       	rjmp	.+110    	; 0x3f2 <ui2a+0xbc>
 384:	e1 e0       	ldi	r30, 0x01	; 1
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	c1 2c       	mov	r12, r1
 38a:	d1 2c       	mov	r13, r1
 38c:	01 c0       	rjmp	.+2      	; 0x390 <ui2a+0x5a>
 38e:	7a 01       	movw	r14, r20
 390:	ce 01       	movw	r24, r28
 392:	bf 01       	movw	r22, r30
 394:	0e 94 c7 03 	call	0x78e	; 0x78e <__udivmodhi4>
 398:	36 2f       	mov	r19, r22
 39a:	26 2f       	mov	r18, r22
 39c:	86 2e       	mov	r8, r22
 39e:	97 2e       	mov	r9, r23
 3a0:	c8 2f       	mov	r28, r24
 3a2:	d9 2f       	mov	r29, r25
 3a4:	cf 01       	movw	r24, r30
 3a6:	b8 01       	movw	r22, r16
 3a8:	0e 94 c7 03 	call	0x78e	; 0x78e <__udivmodhi4>
 3ac:	fb 01       	movw	r30, r22
 3ae:	c1 14       	cp	r12, r1
 3b0:	d1 04       	cpc	r13, r1
 3b2:	39 f4       	brne	.+14     	; 0x3c2 <ui2a+0x8c>
 3b4:	18 14       	cp	r1, r8
 3b6:	19 04       	cpc	r1, r9
 3b8:	24 f0       	brlt	.+8      	; 0x3c2 <ui2a+0x8c>
 3ba:	30 97       	sbiw	r30, 0x00	; 0
 3bc:	11 f1       	breq	.+68     	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
 3be:	a7 01       	movw	r20, r14
 3c0:	e6 cf       	rjmp	.-52     	; 0x38e <ui2a+0x58>
 3c2:	a7 01       	movw	r20, r14
 3c4:	4f 5f       	subi	r20, 0xFF	; 255
 3c6:	5f 4f       	sbci	r21, 0xFF	; 255
 3c8:	9a e0       	ldi	r25, 0x0A	; 10
 3ca:	89 16       	cp	r8, r25
 3cc:	91 04       	cpc	r9, r1
 3ce:	2c f0       	brlt	.+10     	; 0x3da <ui2a+0xa4>
 3d0:	a1 14       	cp	r10, r1
 3d2:	b1 04       	cpc	r11, r1
 3d4:	21 f4       	brne	.+8      	; 0x3de <ui2a+0xa8>
 3d6:	87 e5       	ldi	r24, 0x57	; 87
 3d8:	03 c0       	rjmp	.+6      	; 0x3e0 <ui2a+0xaa>
 3da:	80 e3       	ldi	r24, 0x30	; 48
 3dc:	01 c0       	rjmp	.+2      	; 0x3e0 <ui2a+0xaa>
 3de:	87 e3       	ldi	r24, 0x37	; 55
 3e0:	38 0f       	add	r19, r24
 3e2:	d7 01       	movw	r26, r14
 3e4:	3c 93       	st	X, r19
 3e6:	bf ef       	ldi	r27, 0xFF	; 255
 3e8:	cb 1a       	sub	r12, r27
 3ea:	db 0a       	sbc	r13, r27
 3ec:	30 97       	sbiw	r30, 0x00	; 0
 3ee:	79 f6       	brne	.-98     	; 0x38e <ui2a+0x58>
 3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <ui2a+0xbe>
 3f2:	a7 01       	movw	r20, r14
 3f4:	fa 01       	movw	r30, r20
 3f6:	10 82       	st	Z, r1
 3f8:	0c c0       	rjmp	.+24     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
 3fa:	20 5d       	subi	r18, 0xD0	; 208
 3fc:	d7 01       	movw	r26, r14
 3fe:	2c 93       	st	X, r18
 400:	f9 cf       	rjmp	.-14     	; 0x3f4 <ui2a+0xbe>
 402:	a7 01       	movw	r20, r14
 404:	4f 5f       	subi	r20, 0xFF	; 255
 406:	5f 4f       	sbci	r21, 0xFF	; 255
 408:	ba e0       	ldi	r27, 0x0A	; 10
 40a:	8b 16       	cp	r8, r27
 40c:	91 04       	cpc	r9, r1
 40e:	04 f7       	brge	.-64     	; 0x3d0 <ui2a+0x9a>
 410:	f4 cf       	rjmp	.-24     	; 0x3fa <ui2a+0xc4>
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	1f 91       	pop	r17
 418:	0f 91       	pop	r16
 41a:	ff 90       	pop	r15
 41c:	ef 90       	pop	r14
 41e:	df 90       	pop	r13
 420:	cf 90       	pop	r12
 422:	bf 90       	pop	r11
 424:	af 90       	pop	r10
 426:	9f 90       	pop	r9
 428:	8f 90       	pop	r8
 42a:	08 95       	ret

0000042c <putchw>:
 42c:	9f 92       	push	r9
 42e:	af 92       	push	r10
 430:	bf 92       	push	r11
 432:	cf 92       	push	r12
 434:	df 92       	push	r13
 436:	ef 92       	push	r14
 438:	ff 92       	push	r15
 43a:	0f 93       	push	r16
 43c:	1f 93       	push	r17
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	6c 01       	movw	r12, r24
 444:	5b 01       	movw	r10, r22
 446:	21 11       	cpse	r18, r1
 448:	04 c0       	rjmp	.+8      	; 0x452 <putchw+0x26>
 44a:	68 94       	set
 44c:	99 24       	eor	r9, r9
 44e:	95 f8       	bld	r9, 5
 450:	04 c0       	rjmp	.+8      	; 0x45a <putchw+0x2e>
 452:	0f 2e       	mov	r0, r31
 454:	f0 e3       	ldi	r31, 0x30	; 48
 456:	9f 2e       	mov	r9, r31
 458:	f0 2d       	mov	r31, r0
 45a:	78 01       	movw	r14, r16
 45c:	8f ef       	ldi	r24, 0xFF	; 255
 45e:	e8 1a       	sub	r14, r24
 460:	f8 0a       	sbc	r15, r24
 462:	f8 01       	movw	r30, r16
 464:	60 81       	ld	r22, Z
 466:	66 23       	and	r22, r22
 468:	49 f1       	breq	.+82     	; 0x4bc <__stack+0x5d>
 46a:	14 16       	cp	r1, r20
 46c:	15 06       	cpc	r1, r21
 46e:	64 f5       	brge	.+88     	; 0x4c8 <__stack+0x69>
 470:	f7 01       	movw	r30, r14
 472:	41 50       	subi	r20, 0x01	; 1
 474:	51 09       	sbc	r21, r1
 476:	81 91       	ld	r24, Z+
 478:	88 23       	and	r24, r24
 47a:	d1 f0       	breq	.+52     	; 0x4b0 <__stack+0x51>
 47c:	41 15       	cp	r20, r1
 47e:	51 05       	cpc	r21, r1
 480:	c1 f7       	brne	.-16     	; 0x472 <__stack+0x13>
 482:	22 c0       	rjmp	.+68     	; 0x4c8 <__stack+0x69>
 484:	69 2d       	mov	r22, r9
 486:	c6 01       	movw	r24, r12
 488:	f5 01       	movw	r30, r10
 48a:	09 95       	icall
 48c:	21 97       	sbiw	r28, 0x01	; 1
 48e:	ce 01       	movw	r24, r28
 490:	01 96       	adiw	r24, 0x01	; 1
 492:	18 16       	cp	r1, r24
 494:	19 06       	cpc	r1, r25
 496:	b4 f3       	brlt	.-20     	; 0x484 <__stack+0x25>
 498:	f8 01       	movw	r30, r16
 49a:	60 81       	ld	r22, Z
 49c:	66 23       	and	r22, r22
 49e:	b9 f0       	breq	.+46     	; 0x4ce <__stack+0x6f>
 4a0:	e7 01       	movw	r28, r14
 4a2:	c6 01       	movw	r24, r12
 4a4:	f5 01       	movw	r30, r10
 4a6:	09 95       	icall
 4a8:	69 91       	ld	r22, Y+
 4aa:	61 11       	cpse	r22, r1
 4ac:	fa cf       	rjmp	.-12     	; 0x4a2 <__stack+0x43>
 4ae:	0f c0       	rjmp	.+30     	; 0x4ce <__stack+0x6f>
 4b0:	ea 01       	movw	r28, r20
 4b2:	21 97       	sbiw	r28, 0x01	; 1
 4b4:	14 16       	cp	r1, r20
 4b6:	15 06       	cpc	r1, r21
 4b8:	2c f3       	brlt	.-54     	; 0x484 <__stack+0x25>
 4ba:	f2 cf       	rjmp	.-28     	; 0x4a0 <__stack+0x41>
 4bc:	ea 01       	movw	r28, r20
 4be:	21 97       	sbiw	r28, 0x01	; 1
 4c0:	14 16       	cp	r1, r20
 4c2:	15 06       	cpc	r1, r21
 4c4:	fc f2       	brlt	.-66     	; 0x484 <__stack+0x25>
 4c6:	03 c0       	rjmp	.+6      	; 0x4ce <__stack+0x6f>
 4c8:	f8 01       	movw	r30, r16
 4ca:	60 81       	ld	r22, Z
 4cc:	e9 cf       	rjmp	.-46     	; 0x4a0 <__stack+0x41>
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	1f 91       	pop	r17
 4d4:	0f 91       	pop	r16
 4d6:	ff 90       	pop	r15
 4d8:	ef 90       	pop	r14
 4da:	df 90       	pop	r13
 4dc:	cf 90       	pop	r12
 4de:	bf 90       	pop	r11
 4e0:	af 90       	pop	r10
 4e2:	9f 90       	pop	r9
 4e4:	08 95       	ret

000004e6 <tfp_format>:
	while ((ch= *bf++))
		putf(putp,ch);
	}

void tfp_format(void* putp,putcf putf,char *fmt, va_list va)
	{
 4e6:	2f 92       	push	r2
 4e8:	3f 92       	push	r3
 4ea:	4f 92       	push	r4
 4ec:	5f 92       	push	r5
 4ee:	6f 92       	push	r6
 4f0:	7f 92       	push	r7
 4f2:	8f 92       	push	r8
 4f4:	9f 92       	push	r9
 4f6:	af 92       	push	r10
 4f8:	bf 92       	push	r11
 4fa:	cf 92       	push	r12
 4fc:	df 92       	push	r13
 4fe:	ef 92       	push	r14
 500:	ff 92       	push	r15
 502:	0f 93       	push	r16
 504:	1f 93       	push	r17
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	cd b7       	in	r28, 0x3d	; 61
 50c:	de b7       	in	r29, 0x3e	; 62
 50e:	60 97       	sbiw	r28, 0x10	; 16
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	f8 94       	cli
 514:	de bf       	out	0x3e, r29	; 62
 516:	0f be       	out	0x3f, r0	; 63
 518:	cd bf       	out	0x3d, r28	; 61
 51a:	4c 01       	movw	r8, r24
 51c:	5b 01       	movw	r10, r22
 51e:	6a 01       	movw	r12, r20
 520:	89 01       	movw	r16, r18
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 522:	21 2c       	mov	r2, r1
 524:	9e 01       	movw	r18, r28
 526:	2f 5f       	subi	r18, 0xFF	; 255
 528:	3f 4f       	sbci	r19, 0xFF	; 255
 52a:	3e 87       	std	Y+14, r19	; 0x0e
 52c:	2d 87       	std	Y+13, r18	; 0x0d
 52e:	51 2c       	mov	r5, r1
 530:	31 2c       	mov	r3, r1

static void i2a (int num, char * bf)
	{
	if (num<0) {
		num=-num;
		*bf++ = '-';
 532:	ce 01       	movw	r24, r28
 534:	02 96       	adiw	r24, 0x02	; 2
 536:	98 8b       	std	Y+16, r25	; 0x10
 538:	8f 87       	std	Y+15, r24	; 0x0f
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
 53a:	eb c0       	rjmp	.+470    	; 0x712 <tfp_format+0x22c>
		if (ch!='%') 
 53c:	65 32       	cpi	r22, 0x25	; 37
 53e:	39 f0       	breq	.+14     	; 0x54e <tfp_format+0x68>
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
 540:	9f ef       	ldi	r25, 0xFF	; 255
 542:	c9 1a       	sub	r12, r25
 544:	d9 0a       	sbc	r13, r25
		if (ch!='%') 
			putf(putp,ch);
 546:	c4 01       	movw	r24, r8
 548:	f5 01       	movw	r30, r10
 54a:	09 95       	icall
 54c:	e2 c0       	rjmp	.+452    	; 0x712 <tfp_format+0x22c>
			char lz=0;
#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
#endif
			int w=0;
			ch=*(fmt++);
 54e:	f6 01       	movw	r30, r12
 550:	81 81       	ldd	r24, Z+1	; 0x01
			if (ch=='0') {
 552:	80 33       	cpi	r24, 0x30	; 48
 554:	29 f0       	breq	.+10     	; 0x560 <tfp_format+0x7a>
			char lz=0;
#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
#endif
			int w=0;
			ch=*(fmt++);
 556:	f2 e0       	ldi	r31, 0x02	; 2
 558:	cf 0e       	add	r12, r31
 55a:	d1 1c       	adc	r13, r1

	while ((ch=*(fmt++))) {
		if (ch!='%') 
			putf(putp,ch);
		else {
			char lz=0;
 55c:	41 2c       	mov	r4, r1
 55e:	08 c0       	rjmp	.+16     	; 0x570 <tfp_format+0x8a>
			char lng=0;
#endif
			int w=0;
			ch=*(fmt++);
			if (ch=='0') {
				ch=*(fmt++);
 560:	f6 01       	movw	r30, r12
 562:	82 81       	ldd	r24, Z+2	; 0x02
 564:	96 01       	movw	r18, r12
 566:	2d 5f       	subi	r18, 0xFD	; 253
 568:	3f 4f       	sbci	r19, 0xFF	; 255
 56a:	69 01       	movw	r12, r18
				lz=1;
 56c:	44 24       	eor	r4, r4
 56e:	43 94       	inc	r4
				}
			if (ch>='0' && ch<='9') {
 570:	90 ed       	ldi	r25, 0xD0	; 208
 572:	98 0f       	add	r25, r24
 574:	9a 30       	cpi	r25, 0x0A	; 10
 576:	a0 f5       	brcc	.+104    	; 0x5e0 <tfp_format+0xfa>
 578:	a6 01       	movw	r20, r12
 57a:	e5 2c       	mov	r14, r5
 57c:	f3 2c       	mov	r15, r3
 57e:	11 c0       	rjmp	.+34     	; 0x5a2 <tfp_format+0xbc>
	char* p= *src;
	int num=0;
	int digit;
	while ((digit=a2d(ch))>=0) {
		if (digit>base) break;
		num=num*base+digit;
 580:	c7 01       	movw	r24, r14
 582:	88 0f       	add	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	ee 0c       	add	r14, r14
 588:	ff 1c       	adc	r15, r15
 58a:	ee 0c       	add	r14, r14
 58c:	ff 1c       	adc	r15, r15
 58e:	ee 0c       	add	r14, r14
 590:	ff 1c       	adc	r15, r15
 592:	e8 0e       	add	r14, r24
 594:	f9 1e       	adc	r15, r25
 596:	e2 0e       	add	r14, r18
 598:	f3 1e       	adc	r15, r19
		ch=*p++;
 59a:	f6 01       	movw	r30, r12
 59c:	80 81       	ld	r24, Z
 59e:	4f 5f       	subi	r20, 0xFF	; 255
 5a0:	5f 4f       	sbci	r21, 0xFF	; 255
 5a2:	6a 01       	movw	r12, r20
	ui2a(num,10,0,bf);
	}

static int a2d(char ch)
	{
	if (ch>='0' && ch<='9') 
 5a4:	90 ed       	ldi	r25, 0xD0	; 208
 5a6:	98 0f       	add	r25, r24
 5a8:	9a 30       	cpi	r25, 0x0A	; 10
 5aa:	28 f4       	brcc	.+10     	; 0x5b6 <tfp_format+0xd0>
		return ch-'0';
 5ac:	28 2f       	mov	r18, r24
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	20 53       	subi	r18, 0x30	; 48
 5b2:	31 09       	sbc	r19, r1
 5b4:	11 c0       	rjmp	.+34     	; 0x5d8 <tfp_format+0xf2>
	else if (ch>='a' && ch<='f')
 5b6:	9f e9       	ldi	r25, 0x9F	; 159
 5b8:	98 0f       	add	r25, r24
 5ba:	96 30       	cpi	r25, 0x06	; 6
 5bc:	28 f4       	brcc	.+10     	; 0x5c8 <tfp_format+0xe2>
		return ch-'a'+10;
 5be:	28 2f       	mov	r18, r24
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	27 55       	subi	r18, 0x57	; 87
 5c4:	31 09       	sbc	r19, r1
 5c6:	08 c0       	rjmp	.+16     	; 0x5d8 <tfp_format+0xf2>
	else if (ch>='A' && ch<='F')
 5c8:	9f eb       	ldi	r25, 0xBF	; 191
 5ca:	98 0f       	add	r25, r24
 5cc:	96 30       	cpi	r25, 0x06	; 6
 5ce:	50 f4       	brcc	.+20     	; 0x5e4 <tfp_format+0xfe>
		return ch-'A'+10;
 5d0:	28 2f       	mov	r18, r24
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	27 53       	subi	r18, 0x37	; 55
 5d6:	31 09       	sbc	r19, r1
	{
	char* p= *src;
	int num=0;
	int digit;
	while ((digit=a2d(ch))>=0) {
		if (digit>base) break;
 5d8:	2b 30       	cpi	r18, 0x0B	; 11
 5da:	31 05       	cpc	r19, r1
 5dc:	88 f2       	brcs	.-94     	; 0x580 <tfp_format+0x9a>
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <tfp_format+0xfe>
		else {
			char lz=0;
#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
#endif
			int w=0;
 5e0:	e5 2c       	mov	r14, r5
 5e2:	f3 2c       	mov	r15, r3
			if (ch=='l') {
				ch=*(fmt++);
				lng=1;
			}
#endif
			switch (ch) {
 5e4:	83 36       	cpi	r24, 0x63	; 99
 5e6:	09 f4       	brne	.+2      	; 0x5ea <tfp_format+0x104>
 5e8:	76 c0       	rjmp	.+236    	; 0x6d6 <tfp_format+0x1f0>
 5ea:	50 f4       	brcc	.+20     	; 0x600 <tfp_format+0x11a>
 5ec:	85 32       	cpi	r24, 0x25	; 37
 5ee:	09 f4       	brne	.+2      	; 0x5f2 <tfp_format+0x10c>
 5f0:	8c c0       	rjmp	.+280    	; 0x70a <tfp_format+0x224>
 5f2:	88 35       	cpi	r24, 0x58	; 88
 5f4:	09 f4       	brne	.+2      	; 0x5f8 <tfp_format+0x112>
 5f6:	50 c0       	rjmp	.+160    	; 0x698 <tfp_format+0x1b2>
 5f8:	88 23       	and	r24, r24
 5fa:	09 f4       	brne	.+2      	; 0x5fe <tfp_format+0x118>
 5fc:	8e c0       	rjmp	.+284    	; 0x71a <tfp_format+0x234>
 5fe:	89 c0       	rjmp	.+274    	; 0x712 <tfp_format+0x22c>
 600:	83 37       	cpi	r24, 0x73	; 115
 602:	09 f4       	brne	.+2      	; 0x606 <tfp_format+0x120>
 604:	73 c0       	rjmp	.+230    	; 0x6ec <tfp_format+0x206>
 606:	18 f4       	brcc	.+6      	; 0x60e <tfp_format+0x128>
 608:	84 36       	cpi	r24, 0x64	; 100
 60a:	11 f1       	breq	.+68     	; 0x650 <tfp_format+0x16a>
 60c:	82 c0       	rjmp	.+260    	; 0x712 <tfp_format+0x22c>
 60e:	85 37       	cpi	r24, 0x75	; 117
 610:	21 f0       	breq	.+8      	; 0x61a <tfp_format+0x134>
 612:	88 37       	cpi	r24, 0x78	; 120
 614:	09 f4       	brne	.+2      	; 0x618 <tfp_format+0x132>
 616:	40 c0       	rjmp	.+128    	; 0x698 <tfp_format+0x1b2>
 618:	7c c0       	rjmp	.+248    	; 0x712 <tfp_format+0x22c>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
 61a:	38 01       	movw	r6, r16
 61c:	f2 e0       	ldi	r31, 0x02	; 2
 61e:	6f 0e       	add	r6, r31
 620:	71 1c       	adc	r7, r1
 622:	9e 01       	movw	r18, r28
 624:	2f 5f       	subi	r18, 0xFF	; 255
 626:	3f 4f       	sbci	r19, 0xFF	; 255
 628:	45 2d       	mov	r20, r5
 62a:	53 2d       	mov	r21, r3
 62c:	6a e0       	ldi	r22, 0x0A	; 10
 62e:	70 e0       	ldi	r23, 0x00	; 0
 630:	f8 01       	movw	r30, r16
 632:	80 81       	ld	r24, Z
 634:	91 81       	ldd	r25, Z+1	; 0x01
 636:	0e 94 9b 01 	call	0x336	; 0x336 <ui2a>
					putchw(putp,putf,w,lz,bf);
 63a:	8e 01       	movw	r16, r28
 63c:	0f 5f       	subi	r16, 0xFF	; 255
 63e:	1f 4f       	sbci	r17, 0xFF	; 255
 640:	24 2d       	mov	r18, r4
 642:	a7 01       	movw	r20, r14
 644:	b5 01       	movw	r22, r10
 646:	c4 01       	movw	r24, r8
 648:	0e 94 16 02 	call	0x42c	; 0x42c <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
 64c:	83 01       	movw	r16, r6
					putchw(putp,putf,w,lz,bf);
					break;
 64e:	61 c0       	rjmp	.+194    	; 0x712 <tfp_format+0x22c>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
 650:	38 01       	movw	r6, r16
 652:	f2 e0       	ldi	r31, 0x02	; 2
 654:	6f 0e       	add	r6, r31
 656:	71 1c       	adc	r7, r1
 658:	f8 01       	movw	r30, r16
 65a:	80 81       	ld	r24, Z
 65c:	91 81       	ldd	r25, Z+1	; 0x01
	*bf=0;
	}

static void i2a (int num, char * bf)
	{
	if (num<0) {
 65e:	99 23       	and	r25, r25
 660:	44 f4       	brge	.+16     	; 0x672 <tfp_format+0x18c>
		num=-num;
 662:	91 95       	neg	r25
 664:	81 95       	neg	r24
 666:	91 09       	sbc	r25, r1
		*bf++ = '-';
 668:	fd e2       	ldi	r31, 0x2D	; 45
 66a:	f9 83       	std	Y+1, r31	; 0x01
 66c:	2f 85       	ldd	r18, Y+15	; 0x0f
 66e:	38 89       	ldd	r19, Y+16	; 0x10
 670:	02 c0       	rjmp	.+4      	; 0x676 <tfp_format+0x190>
	*bf=0;
	}

static void i2a (int num, char * bf)
	{
	if (num<0) {
 672:	2d 85       	ldd	r18, Y+13	; 0x0d
 674:	3e 85       	ldd	r19, Y+14	; 0x0e
		num=-num;
		*bf++ = '-';
		}
	ui2a(num,10,0,bf);
 676:	45 2d       	mov	r20, r5
 678:	53 2d       	mov	r21, r3
 67a:	6a e0       	ldi	r22, 0x0A	; 10
 67c:	70 e0       	ldi	r23, 0x00	; 0
 67e:	0e 94 9b 01 	call	0x336	; 0x336 <ui2a>
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
					putchw(putp,putf,w,lz,bf);
 682:	8e 01       	movw	r16, r28
 684:	0f 5f       	subi	r16, 0xFF	; 255
 686:	1f 4f       	sbci	r17, 0xFF	; 255
 688:	24 2d       	mov	r18, r4
 68a:	a7 01       	movw	r20, r14
 68c:	b5 01       	movw	r22, r10
 68e:	c4 01       	movw	r24, r8
 690:	0e 94 16 02 	call	0x42c	; 0x42c <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
 694:	83 01       	movw	r16, r6
					putchw(putp,putf,w,lz,bf);
					break;
 696:	3d c0       	rjmp	.+122    	; 0x712 <tfp_format+0x22c>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 698:	38 01       	movw	r6, r16
 69a:	22 e0       	ldi	r18, 0x02	; 2
 69c:	62 0e       	add	r6, r18
 69e:	71 1c       	adc	r7, r1
 6a0:	41 e0       	ldi	r20, 0x01	; 1
 6a2:	52 2d       	mov	r21, r2
 6a4:	88 35       	cpi	r24, 0x58	; 88
 6a6:	11 f0       	breq	.+4      	; 0x6ac <tfp_format+0x1c6>
 6a8:	45 2d       	mov	r20, r5
 6aa:	53 2d       	mov	r21, r3
 6ac:	9e 01       	movw	r18, r28
 6ae:	2f 5f       	subi	r18, 0xFF	; 255
 6b0:	3f 4f       	sbci	r19, 0xFF	; 255
 6b2:	60 e1       	ldi	r22, 0x10	; 16
 6b4:	70 e0       	ldi	r23, 0x00	; 0
 6b6:	f8 01       	movw	r30, r16
 6b8:	80 81       	ld	r24, Z
 6ba:	91 81       	ldd	r25, Z+1	; 0x01
 6bc:	0e 94 9b 01 	call	0x336	; 0x336 <ui2a>
					putchw(putp,putf,w,lz,bf);
 6c0:	8e 01       	movw	r16, r28
 6c2:	0f 5f       	subi	r16, 0xFF	; 255
 6c4:	1f 4f       	sbci	r17, 0xFF	; 255
 6c6:	24 2d       	mov	r18, r4
 6c8:	a7 01       	movw	r20, r14
 6ca:	b5 01       	movw	r22, r10
 6cc:	c4 01       	movw	r24, r8
 6ce:	0e 94 16 02 	call	0x42c	; 0x42c <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 6d2:	83 01       	movw	r16, r6
					putchw(putp,putf,w,lz,bf);
					break;
 6d4:	1e c0       	rjmp	.+60     	; 0x712 <tfp_format+0x22c>
				case 'c' : 
					putf(putp,(char)(va_arg(va, int)));
 6d6:	78 01       	movw	r14, r16
 6d8:	f2 e0       	ldi	r31, 0x02	; 2
 6da:	ef 0e       	add	r14, r31
 6dc:	f1 1c       	adc	r15, r1
 6de:	f8 01       	movw	r30, r16
 6e0:	60 81       	ld	r22, Z
 6e2:	c4 01       	movw	r24, r8
 6e4:	f5 01       	movw	r30, r10
 6e6:	09 95       	icall
 6e8:	87 01       	movw	r16, r14
					break;
 6ea:	13 c0       	rjmp	.+38     	; 0x712 <tfp_format+0x22c>
				case 's' : 
					putchw(putp,putf,w,0,va_arg(va, char*));
 6ec:	38 01       	movw	r6, r16
 6ee:	f2 e0       	ldi	r31, 0x02	; 2
 6f0:	6f 0e       	add	r6, r31
 6f2:	71 1c       	adc	r7, r1
 6f4:	f8 01       	movw	r30, r16
 6f6:	00 81       	ld	r16, Z
 6f8:	11 81       	ldd	r17, Z+1	; 0x01
 6fa:	20 e0       	ldi	r18, 0x00	; 0
 6fc:	a7 01       	movw	r20, r14
 6fe:	b5 01       	movw	r22, r10
 700:	c4 01       	movw	r24, r8
 702:	0e 94 16 02 	call	0x42c	; 0x42c <putchw>
 706:	83 01       	movw	r16, r6
					break;
 708:	04 c0       	rjmp	.+8      	; 0x712 <tfp_format+0x22c>
				case '%' :
					putf(putp,ch);
 70a:	65 e2       	ldi	r22, 0x25	; 37
 70c:	c4 01       	movw	r24, r8
 70e:	f5 01       	movw	r30, r10
 710:	09 95       	icall
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
 712:	f6 01       	movw	r30, r12
 714:	60 81       	ld	r22, Z
 716:	61 11       	cpse	r22, r1
 718:	11 cf       	rjmp	.-478    	; 0x53c <tfp_format+0x56>
					break;
				}
			}
		}
	abort:;
	}
 71a:	60 96       	adiw	r28, 0x10	; 16
 71c:	0f b6       	in	r0, 0x3f	; 63
 71e:	f8 94       	cli
 720:	de bf       	out	0x3e, r29	; 62
 722:	0f be       	out	0x3f, r0	; 63
 724:	cd bf       	out	0x3d, r28	; 61
 726:	df 91       	pop	r29
 728:	cf 91       	pop	r28
 72a:	1f 91       	pop	r17
 72c:	0f 91       	pop	r16
 72e:	ff 90       	pop	r15
 730:	ef 90       	pop	r14
 732:	df 90       	pop	r13
 734:	cf 90       	pop	r12
 736:	bf 90       	pop	r11
 738:	af 90       	pop	r10
 73a:	9f 90       	pop	r9
 73c:	8f 90       	pop	r8
 73e:	7f 90       	pop	r7
 740:	6f 90       	pop	r6
 742:	5f 90       	pop	r5
 744:	4f 90       	pop	r4
 746:	3f 90       	pop	r3
 748:	2f 90       	pop	r2
 74a:	08 95       	ret

0000074c <init_printf>:


void init_printf(void* putp,void (*putf) (void*,char))
	{
	stdout_putf=putf;
 74c:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <stdout_putf+0x1>
 750:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <stdout_putf>
	stdout_putp=putp;
 754:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__data_end+0x1>
 758:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
 75c:	08 95       	ret

0000075e <tfp_printf>:
	}

void tfp_printf(char *fmt, ...)
	{
 75e:	cf 93       	push	r28
 760:	df 93       	push	r29
 762:	cd b7       	in	r28, 0x3d	; 61
 764:	de b7       	in	r29, 0x3e	; 62
 766:	9e 01       	movw	r18, r28
 768:	2b 5f       	subi	r18, 0xFB	; 251
 76a:	3f 4f       	sbci	r19, 0xFF	; 255
 76c:	f9 01       	movw	r30, r18
 76e:	41 91       	ld	r20, Z+
 770:	51 91       	ld	r21, Z+
 772:	9f 01       	movw	r18, r30
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
 774:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <stdout_putf>
 778:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <stdout_putf+0x1>
 77c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 780:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
 784:	0e 94 73 02 	call	0x4e6	; 0x4e6 <tfp_format>
	va_end(va);
	}
 788:	df 91       	pop	r29
 78a:	cf 91       	pop	r28
 78c:	08 95       	ret

0000078e <__udivmodhi4>:
 78e:	aa 1b       	sub	r26, r26
 790:	bb 1b       	sub	r27, r27
 792:	51 e1       	ldi	r21, 0x11	; 17
 794:	07 c0       	rjmp	.+14     	; 0x7a4 <__udivmodhi4_ep>

00000796 <__udivmodhi4_loop>:
 796:	aa 1f       	adc	r26, r26
 798:	bb 1f       	adc	r27, r27
 79a:	a6 17       	cp	r26, r22
 79c:	b7 07       	cpc	r27, r23
 79e:	10 f0       	brcs	.+4      	; 0x7a4 <__udivmodhi4_ep>
 7a0:	a6 1b       	sub	r26, r22
 7a2:	b7 0b       	sbc	r27, r23

000007a4 <__udivmodhi4_ep>:
 7a4:	88 1f       	adc	r24, r24
 7a6:	99 1f       	adc	r25, r25
 7a8:	5a 95       	dec	r21
 7aa:	a9 f7       	brne	.-22     	; 0x796 <__udivmodhi4_loop>
 7ac:	80 95       	com	r24
 7ae:	90 95       	com	r25
 7b0:	bc 01       	movw	r22, r24
 7b2:	cd 01       	movw	r24, r26
 7b4:	08 95       	ret

000007b6 <__tablejump2__>:
 7b6:	ee 0f       	add	r30, r30
 7b8:	ff 1f       	adc	r31, r31
 7ba:	05 90       	lpm	r0, Z+
 7bc:	f4 91       	lpm	r31, Z
 7be:	e0 2d       	mov	r30, r0
 7c0:	09 94       	ijmp

000007c2 <__umulhisi3>:
 7c2:	a2 9f       	mul	r26, r18
 7c4:	b0 01       	movw	r22, r0
 7c6:	b3 9f       	mul	r27, r19
 7c8:	c0 01       	movw	r24, r0
 7ca:	a3 9f       	mul	r26, r19
 7cc:	70 0d       	add	r23, r0
 7ce:	81 1d       	adc	r24, r1
 7d0:	11 24       	eor	r1, r1
 7d2:	91 1d       	adc	r25, r1
 7d4:	b2 9f       	mul	r27, r18
 7d6:	70 0d       	add	r23, r0
 7d8:	81 1d       	adc	r24, r1
 7da:	11 24       	eor	r1, r1
 7dc:	91 1d       	adc	r25, r1
 7de:	08 95       	ret

000007e0 <_exit>:
 7e0:	f8 94       	cli

000007e2 <__stop_program>:
 7e2:	ff cf       	rjmp	.-2      	; 0x7e2 <__stop_program>
