
Schrittmotor_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000006ee  00000782  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080006e  0080006e  00000790  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fa9  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005be  00000000  00000000  00001855  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f4  00000000  00000000  00001e13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  00002608  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c1  00000000  00000000  00002824  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000eab  00000000  00000000  00002ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003990  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 37       	cpi	r26, 0x73	; 115
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <main>
  8a:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_zToLCD>:
*************************************************************/
{
	//char D=0;

	//LCD_PORT = 1<< EN;
	PORTA|=1<< EN;
  92:	dc 9a       	sbi	0x1b, 4	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	e7 e5       	ldi	r30, 0x57	; 87
  96:	f2 e0       	ldi	r31, 0x02	; 2
  98:	31 97       	sbiw	r30, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <lcd_zToLCD+0x6>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <lcd_zToLCD+0xc>
  9e:	00 00       	nop

	_delay_ms(WAIT_0);	

	PORTA&=~ (1<<RS);
  a0:	de 98       	cbi	0x1b, 6	; 27
	PORTB&=~(1<<DB4 | 1<<DB5 | 1<<DB6 | 1<<DB7);
  a2:	98 b3       	in	r25, 0x18	; 24
  a4:	9b 71       	andi	r25, 0x1B	; 27
  a6:	98 bb       	out	0x18, r25	; 24
	
	if (dataD & 0x01) PORTB|=1<<DB4;;
  a8:	80 fd       	sbrc	r24, 0
  aa:	c2 9a       	sbi	0x18, 2	; 24
	if (dataD & 0x02) PORTB|=1<<DB5;
  ac:	81 fd       	sbrc	r24, 1
  ae:	c5 9a       	sbi	0x18, 5	; 24
	if (dataD & 0x04) PORTB|=1<<DB6;
  b0:	82 fd       	sbrc	r24, 2
  b2:	c6 9a       	sbi	0x18, 6	; 24
	if (dataD & 0x08) PORTB|=1<<DB7;
  b4:	83 fd       	sbrc	r24, 3
  b6:	c7 9a       	sbi	0x18, 7	; 24
	if (dataD & 0x10) PORTA|=1<<RS; 
  b8:	84 fd       	sbrc	r24, 4
  ba:	de 9a       	sbi	0x1b, 6	; 27

	//LCD_PORT &= ~(1<< EN);
	PORTA &= ~(1<< EN);
  bc:	dc 98       	cbi	0x1b, 4	; 27
  be:	87 e5       	ldi	r24, 0x57	; 87
  c0:	92 e0       	ldi	r25, 0x02	; 2
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_zToLCD+0x30>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <lcd_zToLCD+0x36>
  c8:	00 00       	nop
  ca:	08 95       	ret

000000cc <lcd_home>:
  cc:	8f e5       	ldi	r24, 0x5F	; 95
  ce:	9a ee       	ldi	r25, 0xEA	; 234
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_home+0x4>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <lcd_home+0xa>
  d6:	00 00       	nop
setzt den Adresszaehler des DD-RAM auf Adresse 0. Der Inhalt des DD-RAMS
bleibt unveraendert. Der Cursor wird auf die erste Position der ersten
Zeile gesetzt.
*************************************************************/
{
	_delay_ms(WAIT_2);	lcd_zToLCD(0x00);      	// LCD-Return-Home 1
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
  de:	8f e5       	ldi	r24, 0x5F	; 95
  e0:	9a ee       	ldi	r25, 0xEA	; 234
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_home+0x16>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_home+0x1c>
  e8:	00 00       	nop
	_delay_ms(WAIT_2);	lcd_zToLCD(0x02);       // LCD-Return-Home 2
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
  f0:	08 95       	ret

000000f2 <lcd_init>:
*************************************************************/
{
	//LCD_DDR |= 1<<RS | 1<<RW | 1<<EN | 1<<VEE | 1<<DB7 | 1<<DB6 | 1<<DB5 | 1<<DB4;
	//LCD_DDR |= 1<<RS | 1<<EN | 1<<DB7 | 1<<DB6 | 1<<DB5 | 1<<DB4;

	DDRA|= 1<<RS | 1<<EN ;
  f2:	8a b3       	in	r24, 0x1a	; 26
  f4:	80 65       	ori	r24, 0x50	; 80
  f6:	8a bb       	out	0x1a, r24	; 26
	DDRB|= 1<<DB7 | 1<<DB6 | 1<<DB5 | 1<<DB4;
  f8:	87 b3       	in	r24, 0x17	; 23
  fa:	84 6e       	ori	r24, 0xE4	; 228
  fc:	87 bb       	out	0x17, r24	; 23
  fe:	8f e5       	ldi	r24, 0x5F	; 95
 100:	9a ee       	ldi	r25, 0xEA	; 234
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <lcd_init+0x10>
 106:	00 c0       	rjmp	.+0      	; 0x108 <lcd_init+0x16>
 108:	00 00       	nop

	_delay_ms(20);
	lcd_zToLCD(0x03);       // Function Set A
 10a:	83 e0       	ldi	r24, 0x03	; 3
 10c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 110:	8f e2       	ldi	r24, 0x2F	; 47
 112:	95 e7       	ldi	r25, 0x75	; 117
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <lcd_init+0x22>
 118:	00 c0       	rjmp	.+0      	; 0x11a <lcd_init+0x28>
 11a:	00 00       	nop
	_delay_ms(10);
	lcd_zToLCD(0x43);       // Function Set B
 11c:	83 e4       	ldi	r24, 0x43	; 67
 11e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 122:	87 eb       	ldi	r24, 0xB7	; 183
 124:	9b e0       	ldi	r25, 0x0B	; 11
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_init+0x34>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_init+0x3a>
 12c:	00 00       	nop
	_delay_ms(1);	
	lcd_zToLCD(0x03);       // Function Set C
 12e:	83 e0       	ldi	r24, 0x03	; 3
 130:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>

	lcd_zToLCD(0x02);       // Function Set D
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	
	lcd_zToLCD(0x02);       // Funktion Set High Byte
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x08);       // Funktion Set Low Byte
 140:	88 e0       	ldi	r24, 0x08	; 8
 142:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	
	lcd_zToLCD(0x00);       // Display On High Byte
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x0C);       // Display On Low Byte	
 14c:	8c e0       	ldi	r24, 0x0C	; 12
 14e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Display Clear High Byte
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x01);       // Display Clear Low Byte	
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Entry Mode Set High Byte
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x06);       // Entry Mode Set Low Byte
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 16a:	87 eb       	ldi	r24, 0xB7	; 183
 16c:	9b e0       	ldi	r25, 0x0B	; 11
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <lcd_init+0x7c>
 172:	00 c0       	rjmp	.+0      	; 0x174 <lcd_init+0x82>
 174:	00 00       	nop
	_delay_ms(1);

	lcd_home();
 176:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_home>
	init_printf(NULL,my_putc);
 17a:	64 ec       	ldi	r22, 0xC4	; 196
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 40 03 	call	0x680	; 0x680 <init_printf>
 186:	08 95       	ret

00000188 <my_putc>:
	_delay_us(200);         //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
}

void my_putc ( void* p, char c)
{
 188:	cf 93       	push	r28
 18a:	c6 2f       	mov	r28, r22
	//unsigned char Zeichen;
	char Zeichen;
	
	Zeichen = c;
	Zeichen>>=4;
 18c:	86 2f       	mov	r24, r22
 18e:	82 95       	swap	r24
 190:	8f 70       	andi	r24, 0x0F	; 15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	e7 e5       	ldi	r30, 0x57	; 87
 194:	f2 e0       	ldi	r31, 0x02	; 2
 196:	31 97       	sbiw	r30, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <my_putc+0xe>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <my_putc+0x14>
 19c:	00 00       	nop
	Zeichen|=0x10;
	_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe High Bytes
 19e:	80 61       	ori	r24, 0x10	; 16
 1a0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	Zeichen = c;
	Zeichen&=0x0f;
 1a4:	8c 2f       	mov	r24, r28
 1a6:	8f 70       	andi	r24, 0x0F	; 15
 1a8:	e7 e5       	ldi	r30, 0x57	; 87
 1aa:	f2 e0       	ldi	r31, 0x02	; 2
 1ac:	31 97       	sbiw	r30, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <my_putc+0x24>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <my_putc+0x2a>
 1b2:	00 00       	nop
	Zeichen|=0x10;
	_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe Low Byte
 1b4:	80 61       	ori	r24, 0x10	; 16
 1b6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <lcd_pos>:

Die 1. Zeile beginnt mit der DD-Adresse 0x00.
Die 2. Zeile beginnt mit der DD-Adresse 0x40.
*****************************************************************/
void lcd_pos(unsigned char zeile, unsigned char Pos)
{
 1be:	cf 93       	push	r28
 1c0:	c6 2f       	mov	r28, r22
	unsigned char Zeichen;

	if (zeile) Pos+=0x40;	
 1c2:	81 11       	cpse	r24, r1
 1c4:	c0 5c       	subi	r28, 0xC0	; 192
  	Zeichen=Pos;			//Ausgabe der DD-Ram-Adresse
	Zeichen>>=4;
 1c6:	8c 2f       	mov	r24, r28
 1c8:	82 95       	swap	r24
 1ca:	8f 70       	andi	r24, 0x0F	; 15
 1cc:	e7 e5       	ldi	r30, 0x57	; 87
 1ce:	f2 e0       	ldi	r31, 0x02	; 2
 1d0:	31 97       	sbiw	r30, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_pos+0x12>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <lcd_pos+0x18>
 1d6:	00 00       	nop
	Zeichen|=0x08;		
	_delay_us(200);         //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe High Bytes
 1d8:	88 60       	ori	r24, 0x08	; 8
 1da:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 1de:	87 e5       	ldi	r24, 0x57	; 87
 1e0:	92 e0       	ldi	r25, 0x02	; 2
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_pos+0x24>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <lcd_pos+0x2a>
 1e8:	00 00       	nop
	Zeichen=Pos;
	Zeichen&=0x0F;	
	_delay_us(200);         //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
 1ea:	8c 2f       	mov	r24, r28
 1ec:	8f 70       	andi	r24, 0x0F	; 15
 1ee:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
}
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <main>:
*/

int main(void)
{
	// I/O Einstellungen
	DDRIN   = LOW;	// Richtungsregister (DDR*(A)) auf Eingang
 1f6:	1a ba       	out	0x1a, r1	; 26
	DDROUT  = HIGH;	// Richtungsregister (DDR*(C)) auf Ausgang
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	84 bb       	out	0x14, r24	; 20
	INPULL  = HIGH;	// Pullup an (PORT*(A)) auf HIGH
 1fc:	8b bb       	out	0x1b, r24	; 27
	OUTPUT  = LOW;	// Ausgang (PORT(*C)) LOW, Schrittmotor aus
 1fe:	15 ba       	out	0x15, r1	; 21

	// LCD Display Grundeinstellung
	lcd_init();				// LCD initialisieren
 200:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_init>
	lcd_pos(0,0);			// LCD Zeigerposition (Zeile/Spalte (0,0))
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_pos>
	printf("uc2_a");		// LCD Ausgabe (Stepper)
 20c:	88 e6       	ldi	r24, 0x68	; 104
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	9f 93       	push	r25
 212:	8f 93       	push	r24
 214:	0e 94 49 03 	call	0x692	; 0x692 <tfp_printf>
 218:	0f 90       	pop	r0
 21a:	0f 90       	pop	r0
 21c:	40 e6       	ldi	r20, 0x60	; 96
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	28 e6       	ldi	r18, 0x68	; 104
 222:	30 e0       	ldi	r19, 0x00	; 0

	// sei();					// Globale Interruptfreigabe

    while (1)
    {	
		if(count < (steps/2))
 224:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 228:	84 36       	cpi	r24, 0x64	; 100
 22a:	90 f4       	brcc	.+36     	; 0x250 <main+0x5a>
 22c:	fa 01       	movw	r30, r20
		{		
			for(unsigned char i = 0; i < sizeof(pattern); i++)
			{
				OUTPUT = pattern[i];
 22e:	81 91       	ld	r24, Z+
 230:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 232:	8f e2       	ldi	r24, 0x2F	; 47
 234:	95 e7       	ldi	r25, 0x75	; 117
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <main+0x40>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0x46>
 23c:	00 00       	nop
				_delay_ms(10);
				count++;
 23e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 242:	8f 5f       	subi	r24, 0xFF	; 255
 244:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>

    while (1)
    {	
		if(count < (steps/2))
		{		
			for(unsigned char i = 0; i < sizeof(pattern); i++)
 248:	e2 17       	cp	r30, r18
 24a:	f3 07       	cpc	r31, r19
 24c:	81 f7       	brne	.-32     	; 0x22e <main+0x38>
 24e:	ea cf       	rjmp	.-44     	; 0x224 <main+0x2e>
				count++;
			}
		}
		else
		{
			OUTPUT = 0x00;
 250:	15 ba       	out	0x15, r1	; 21
 252:	9f ef       	ldi	r25, 0xFF	; 255
 254:	6d e3       	ldi	r22, 0x3D	; 61
 256:	89 e4       	ldi	r24, 0x49	; 73
 258:	91 50       	subi	r25, 0x01	; 1
 25a:	60 40       	sbci	r22, 0x00	; 0
 25c:	80 40       	sbci	r24, 0x00	; 0
 25e:	e1 f7       	brne	.-8      	; 0x258 <main+0x62>
 260:	00 c0       	rjmp	.+0      	; 0x262 <main+0x6c>
 262:	00 00       	nop
			_delay_ms(2000);
			count = 0;
 264:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
 268:	dd cf       	rjmp	.-70     	; 0x224 <main+0x2e>

0000026a <ui2a>:
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
 26a:	8f 92       	push	r8
 26c:	9f 92       	push	r9
 26e:	af 92       	push	r10
 270:	bf 92       	push	r11
 272:	cf 92       	push	r12
 274:	df 92       	push	r13
 276:	ef 92       	push	r14
 278:	ff 92       	push	r15
 27a:	0f 93       	push	r16
 27c:	1f 93       	push	r17
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	ec 01       	movw	r28, r24
 284:	8b 01       	movw	r16, r22
 286:	5a 01       	movw	r10, r20
 288:	79 01       	movw	r14, r18
 28a:	86 17       	cp	r24, r22
 28c:	97 07       	cpc	r25, r23
 28e:	a0 f0       	brcs	.+40     	; 0x2b8 <ui2a+0x4e>
 290:	e1 e0       	ldi	r30, 0x01	; 1
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	cf 01       	movw	r24, r30
 296:	80 9f       	mul	r24, r16
 298:	f0 01       	movw	r30, r0
 29a:	81 9f       	mul	r24, r17
 29c:	f0 0d       	add	r31, r0
 29e:	90 9f       	mul	r25, r16
 2a0:	f0 0d       	add	r31, r0
 2a2:	11 24       	eor	r1, r1
 2a4:	ce 01       	movw	r24, r28
 2a6:	bf 01       	movw	r22, r30
 2a8:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__udivmodhi4>
 2ac:	60 17       	cp	r22, r16
 2ae:	71 07       	cpc	r23, r17
 2b0:	88 f7       	brcc	.-30     	; 0x294 <ui2a+0x2a>
 2b2:	30 97       	sbiw	r30, 0x00	; 0
 2b4:	19 f4       	brne	.+6      	; 0x2bc <ui2a+0x52>
 2b6:	37 c0       	rjmp	.+110    	; 0x326 <ui2a+0xbc>
 2b8:	e1 e0       	ldi	r30, 0x01	; 1
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	c1 2c       	mov	r12, r1
 2be:	d1 2c       	mov	r13, r1
 2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <ui2a+0x5a>
 2c2:	7a 01       	movw	r14, r20
 2c4:	ce 01       	movw	r24, r28
 2c6:	bf 01       	movw	r22, r30
 2c8:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__udivmodhi4>
 2cc:	36 2f       	mov	r19, r22
 2ce:	26 2f       	mov	r18, r22
 2d0:	86 2e       	mov	r8, r22
 2d2:	97 2e       	mov	r9, r23
 2d4:	c8 2f       	mov	r28, r24
 2d6:	d9 2f       	mov	r29, r25
 2d8:	cf 01       	movw	r24, r30
 2da:	b8 01       	movw	r22, r16
 2dc:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__udivmodhi4>
 2e0:	fb 01       	movw	r30, r22
 2e2:	c1 14       	cp	r12, r1
 2e4:	d1 04       	cpc	r13, r1
 2e6:	39 f4       	brne	.+14     	; 0x2f6 <ui2a+0x8c>
 2e8:	18 14       	cp	r1, r8
 2ea:	19 04       	cpc	r1, r9
 2ec:	24 f0       	brlt	.+8      	; 0x2f6 <ui2a+0x8c>
 2ee:	30 97       	sbiw	r30, 0x00	; 0
 2f0:	11 f1       	breq	.+68     	; 0x336 <ui2a+0xcc>
 2f2:	a7 01       	movw	r20, r14
 2f4:	e6 cf       	rjmp	.-52     	; 0x2c2 <ui2a+0x58>
 2f6:	a7 01       	movw	r20, r14
 2f8:	4f 5f       	subi	r20, 0xFF	; 255
 2fa:	5f 4f       	sbci	r21, 0xFF	; 255
 2fc:	9a e0       	ldi	r25, 0x0A	; 10
 2fe:	89 16       	cp	r8, r25
 300:	91 04       	cpc	r9, r1
 302:	2c f0       	brlt	.+10     	; 0x30e <ui2a+0xa4>
 304:	a1 14       	cp	r10, r1
 306:	b1 04       	cpc	r11, r1
 308:	21 f4       	brne	.+8      	; 0x312 <ui2a+0xa8>
 30a:	87 e5       	ldi	r24, 0x57	; 87
 30c:	03 c0       	rjmp	.+6      	; 0x314 <ui2a+0xaa>
 30e:	80 e3       	ldi	r24, 0x30	; 48
 310:	01 c0       	rjmp	.+2      	; 0x314 <ui2a+0xaa>
 312:	87 e3       	ldi	r24, 0x37	; 55
 314:	38 0f       	add	r19, r24
 316:	d7 01       	movw	r26, r14
 318:	3c 93       	st	X, r19
 31a:	bf ef       	ldi	r27, 0xFF	; 255
 31c:	cb 1a       	sub	r12, r27
 31e:	db 0a       	sbc	r13, r27
 320:	30 97       	sbiw	r30, 0x00	; 0
 322:	79 f6       	brne	.-98     	; 0x2c2 <ui2a+0x58>
 324:	01 c0       	rjmp	.+2      	; 0x328 <ui2a+0xbe>
 326:	a7 01       	movw	r20, r14
 328:	fa 01       	movw	r30, r20
 32a:	10 82       	st	Z, r1
 32c:	0c c0       	rjmp	.+24     	; 0x346 <ui2a+0xdc>
 32e:	20 5d       	subi	r18, 0xD0	; 208
 330:	d7 01       	movw	r26, r14
 332:	2c 93       	st	X, r18
 334:	f9 cf       	rjmp	.-14     	; 0x328 <ui2a+0xbe>
 336:	a7 01       	movw	r20, r14
 338:	4f 5f       	subi	r20, 0xFF	; 255
 33a:	5f 4f       	sbci	r21, 0xFF	; 255
 33c:	ba e0       	ldi	r27, 0x0A	; 10
 33e:	8b 16       	cp	r8, r27
 340:	91 04       	cpc	r9, r1
 342:	04 f7       	brge	.-64     	; 0x304 <ui2a+0x9a>
 344:	f4 cf       	rjmp	.-24     	; 0x32e <ui2a+0xc4>
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	1f 91       	pop	r17
 34c:	0f 91       	pop	r16
 34e:	ff 90       	pop	r15
 350:	ef 90       	pop	r14
 352:	df 90       	pop	r13
 354:	cf 90       	pop	r12
 356:	bf 90       	pop	r11
 358:	af 90       	pop	r10
 35a:	9f 90       	pop	r9
 35c:	8f 90       	pop	r8
 35e:	08 95       	ret

00000360 <putchw>:
 360:	9f 92       	push	r9
 362:	af 92       	push	r10
 364:	bf 92       	push	r11
 366:	cf 92       	push	r12
 368:	df 92       	push	r13
 36a:	ef 92       	push	r14
 36c:	ff 92       	push	r15
 36e:	0f 93       	push	r16
 370:	1f 93       	push	r17
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	6c 01       	movw	r12, r24
 378:	5b 01       	movw	r10, r22
 37a:	21 11       	cpse	r18, r1
 37c:	04 c0       	rjmp	.+8      	; 0x386 <putchw+0x26>
 37e:	68 94       	set
 380:	99 24       	eor	r9, r9
 382:	95 f8       	bld	r9, 5
 384:	04 c0       	rjmp	.+8      	; 0x38e <putchw+0x2e>
 386:	0f 2e       	mov	r0, r31
 388:	f0 e3       	ldi	r31, 0x30	; 48
 38a:	9f 2e       	mov	r9, r31
 38c:	f0 2d       	mov	r31, r0
 38e:	78 01       	movw	r14, r16
 390:	8f ef       	ldi	r24, 0xFF	; 255
 392:	e8 1a       	sub	r14, r24
 394:	f8 0a       	sbc	r15, r24
 396:	f8 01       	movw	r30, r16
 398:	60 81       	ld	r22, Z
 39a:	66 23       	and	r22, r22
 39c:	49 f1       	breq	.+82     	; 0x3f0 <putchw+0x90>
 39e:	14 16       	cp	r1, r20
 3a0:	15 06       	cpc	r1, r21
 3a2:	64 f5       	brge	.+88     	; 0x3fc <putchw+0x9c>
 3a4:	f7 01       	movw	r30, r14
 3a6:	41 50       	subi	r20, 0x01	; 1
 3a8:	51 09       	sbc	r21, r1
 3aa:	81 91       	ld	r24, Z+
 3ac:	88 23       	and	r24, r24
 3ae:	d1 f0       	breq	.+52     	; 0x3e4 <putchw+0x84>
 3b0:	41 15       	cp	r20, r1
 3b2:	51 05       	cpc	r21, r1
 3b4:	c1 f7       	brne	.-16     	; 0x3a6 <putchw+0x46>
 3b6:	22 c0       	rjmp	.+68     	; 0x3fc <putchw+0x9c>
 3b8:	69 2d       	mov	r22, r9
 3ba:	c6 01       	movw	r24, r12
 3bc:	f5 01       	movw	r30, r10
 3be:	09 95       	icall
 3c0:	21 97       	sbiw	r28, 0x01	; 1
 3c2:	ce 01       	movw	r24, r28
 3c4:	01 96       	adiw	r24, 0x01	; 1
 3c6:	18 16       	cp	r1, r24
 3c8:	19 06       	cpc	r1, r25
 3ca:	b4 f3       	brlt	.-20     	; 0x3b8 <putchw+0x58>
 3cc:	f8 01       	movw	r30, r16
 3ce:	60 81       	ld	r22, Z
 3d0:	66 23       	and	r22, r22
 3d2:	b9 f0       	breq	.+46     	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
 3d4:	e7 01       	movw	r28, r14
 3d6:	c6 01       	movw	r24, r12
 3d8:	f5 01       	movw	r30, r10
 3da:	09 95       	icall
 3dc:	69 91       	ld	r22, Y+
 3de:	61 11       	cpse	r22, r1
 3e0:	fa cf       	rjmp	.-12     	; 0x3d6 <putchw+0x76>
 3e2:	0f c0       	rjmp	.+30     	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
 3e4:	ea 01       	movw	r28, r20
 3e6:	21 97       	sbiw	r28, 0x01	; 1
 3e8:	14 16       	cp	r1, r20
 3ea:	15 06       	cpc	r1, r21
 3ec:	2c f3       	brlt	.-54     	; 0x3b8 <putchw+0x58>
 3ee:	f2 cf       	rjmp	.-28     	; 0x3d4 <putchw+0x74>
 3f0:	ea 01       	movw	r28, r20
 3f2:	21 97       	sbiw	r28, 0x01	; 1
 3f4:	14 16       	cp	r1, r20
 3f6:	15 06       	cpc	r1, r21
 3f8:	fc f2       	brlt	.-66     	; 0x3b8 <putchw+0x58>
 3fa:	03 c0       	rjmp	.+6      	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
 3fc:	f8 01       	movw	r30, r16
 3fe:	60 81       	ld	r22, Z
 400:	e9 cf       	rjmp	.-46     	; 0x3d4 <putchw+0x74>
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	1f 91       	pop	r17
 408:	0f 91       	pop	r16
 40a:	ff 90       	pop	r15
 40c:	ef 90       	pop	r14
 40e:	df 90       	pop	r13
 410:	cf 90       	pop	r12
 412:	bf 90       	pop	r11
 414:	af 90       	pop	r10
 416:	9f 90       	pop	r9
 418:	08 95       	ret

0000041a <tfp_format>:
	while ((ch= *bf++))
		putf(putp,ch);
	}

void tfp_format(void* putp,putcf putf,char *fmt, va_list va)
	{
 41a:	2f 92       	push	r2
 41c:	3f 92       	push	r3
 41e:	4f 92       	push	r4
 420:	5f 92       	push	r5
 422:	6f 92       	push	r6
 424:	7f 92       	push	r7
 426:	8f 92       	push	r8
 428:	9f 92       	push	r9
 42a:	af 92       	push	r10
 42c:	bf 92       	push	r11
 42e:	cf 92       	push	r12
 430:	df 92       	push	r13
 432:	ef 92       	push	r14
 434:	ff 92       	push	r15
 436:	0f 93       	push	r16
 438:	1f 93       	push	r17
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	cd b7       	in	r28, 0x3d	; 61
 440:	de b7       	in	r29, 0x3e	; 62
 442:	60 97       	sbiw	r28, 0x10	; 16
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	f8 94       	cli
 448:	de bf       	out	0x3e, r29	; 62
 44a:	0f be       	out	0x3f, r0	; 63
 44c:	cd bf       	out	0x3d, r28	; 61
 44e:	4c 01       	movw	r8, r24
 450:	5b 01       	movw	r10, r22
 452:	6a 01       	movw	r12, r20
 454:	89 01       	movw	r16, r18
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 456:	21 2c       	mov	r2, r1
 458:	9e 01       	movw	r18, r28
 45a:	2f 5f       	subi	r18, 0xFF	; 255
 45c:	3f 4f       	sbci	r19, 0xFF	; 255
 45e:	3e 87       	std	Y+14, r19	; 0x0e
 460:	2d 87       	std	Y+13, r18	; 0x0d
 462:	51 2c       	mov	r5, r1
 464:	31 2c       	mov	r3, r1

static void i2a (int num, char * bf)
	{
	if (num<0) {
		num=-num;
		*bf++ = '-';
 466:	ce 01       	movw	r24, r28
 468:	02 96       	adiw	r24, 0x02	; 2
 46a:	98 8b       	std	Y+16, r25	; 0x10
 46c:	8f 87       	std	Y+15, r24	; 0x0f
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
 46e:	eb c0       	rjmp	.+470    	; 0x646 <__stack+0x1e7>
		if (ch!='%') 
 470:	65 32       	cpi	r22, 0x25	; 37
 472:	39 f0       	breq	.+14     	; 0x482 <__stack+0x23>
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
 474:	9f ef       	ldi	r25, 0xFF	; 255
 476:	c9 1a       	sub	r12, r25
 478:	d9 0a       	sbc	r13, r25
		if (ch!='%') 
			putf(putp,ch);
 47a:	c4 01       	movw	r24, r8
 47c:	f5 01       	movw	r30, r10
 47e:	09 95       	icall
 480:	e2 c0       	rjmp	.+452    	; 0x646 <__stack+0x1e7>
			char lz=0;
#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
#endif
			int w=0;
			ch=*(fmt++);
 482:	f6 01       	movw	r30, r12
 484:	81 81       	ldd	r24, Z+1	; 0x01
			if (ch=='0') {
 486:	80 33       	cpi	r24, 0x30	; 48
 488:	29 f0       	breq	.+10     	; 0x494 <__stack+0x35>
			char lz=0;
#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
#endif
			int w=0;
			ch=*(fmt++);
 48a:	f2 e0       	ldi	r31, 0x02	; 2
 48c:	cf 0e       	add	r12, r31
 48e:	d1 1c       	adc	r13, r1

	while ((ch=*(fmt++))) {
		if (ch!='%') 
			putf(putp,ch);
		else {
			char lz=0;
 490:	41 2c       	mov	r4, r1
 492:	08 c0       	rjmp	.+16     	; 0x4a4 <__stack+0x45>
			char lng=0;
#endif
			int w=0;
			ch=*(fmt++);
			if (ch=='0') {
				ch=*(fmt++);
 494:	f6 01       	movw	r30, r12
 496:	82 81       	ldd	r24, Z+2	; 0x02
 498:	96 01       	movw	r18, r12
 49a:	2d 5f       	subi	r18, 0xFD	; 253
 49c:	3f 4f       	sbci	r19, 0xFF	; 255
 49e:	69 01       	movw	r12, r18
				lz=1;
 4a0:	44 24       	eor	r4, r4
 4a2:	43 94       	inc	r4
				}
			if (ch>='0' && ch<='9') {
 4a4:	90 ed       	ldi	r25, 0xD0	; 208
 4a6:	98 0f       	add	r25, r24
 4a8:	9a 30       	cpi	r25, 0x0A	; 10
 4aa:	a0 f5       	brcc	.+104    	; 0x514 <__stack+0xb5>
 4ac:	a6 01       	movw	r20, r12
 4ae:	e5 2c       	mov	r14, r5
 4b0:	f3 2c       	mov	r15, r3
 4b2:	11 c0       	rjmp	.+34     	; 0x4d6 <__stack+0x77>
	char* p= *src;
	int num=0;
	int digit;
	while ((digit=a2d(ch))>=0) {
		if (digit>base) break;
		num=num*base+digit;
 4b4:	c7 01       	movw	r24, r14
 4b6:	88 0f       	add	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	ee 0c       	add	r14, r14
 4bc:	ff 1c       	adc	r15, r15
 4be:	ee 0c       	add	r14, r14
 4c0:	ff 1c       	adc	r15, r15
 4c2:	ee 0c       	add	r14, r14
 4c4:	ff 1c       	adc	r15, r15
 4c6:	e8 0e       	add	r14, r24
 4c8:	f9 1e       	adc	r15, r25
 4ca:	e2 0e       	add	r14, r18
 4cc:	f3 1e       	adc	r15, r19
		ch=*p++;
 4ce:	f6 01       	movw	r30, r12
 4d0:	80 81       	ld	r24, Z
 4d2:	4f 5f       	subi	r20, 0xFF	; 255
 4d4:	5f 4f       	sbci	r21, 0xFF	; 255
 4d6:	6a 01       	movw	r12, r20
	ui2a(num,10,0,bf);
	}

static int a2d(char ch)
	{
	if (ch>='0' && ch<='9') 
 4d8:	90 ed       	ldi	r25, 0xD0	; 208
 4da:	98 0f       	add	r25, r24
 4dc:	9a 30       	cpi	r25, 0x0A	; 10
 4de:	28 f4       	brcc	.+10     	; 0x4ea <__stack+0x8b>
		return ch-'0';
 4e0:	28 2f       	mov	r18, r24
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	20 53       	subi	r18, 0x30	; 48
 4e6:	31 09       	sbc	r19, r1
 4e8:	11 c0       	rjmp	.+34     	; 0x50c <__stack+0xad>
	else if (ch>='a' && ch<='f')
 4ea:	9f e9       	ldi	r25, 0x9F	; 159
 4ec:	98 0f       	add	r25, r24
 4ee:	96 30       	cpi	r25, 0x06	; 6
 4f0:	28 f4       	brcc	.+10     	; 0x4fc <__stack+0x9d>
		return ch-'a'+10;
 4f2:	28 2f       	mov	r18, r24
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	27 55       	subi	r18, 0x57	; 87
 4f8:	31 09       	sbc	r19, r1
 4fa:	08 c0       	rjmp	.+16     	; 0x50c <__stack+0xad>
	else if (ch>='A' && ch<='F')
 4fc:	9f eb       	ldi	r25, 0xBF	; 191
 4fe:	98 0f       	add	r25, r24
 500:	96 30       	cpi	r25, 0x06	; 6
 502:	50 f4       	brcc	.+20     	; 0x518 <__stack+0xb9>
		return ch-'A'+10;
 504:	28 2f       	mov	r18, r24
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	27 53       	subi	r18, 0x37	; 55
 50a:	31 09       	sbc	r19, r1
	{
	char* p= *src;
	int num=0;
	int digit;
	while ((digit=a2d(ch))>=0) {
		if (digit>base) break;
 50c:	2b 30       	cpi	r18, 0x0B	; 11
 50e:	31 05       	cpc	r19, r1
 510:	88 f2       	brcs	.-94     	; 0x4b4 <__stack+0x55>
 512:	02 c0       	rjmp	.+4      	; 0x518 <__stack+0xb9>
		else {
			char lz=0;
#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
#endif
			int w=0;
 514:	e5 2c       	mov	r14, r5
 516:	f3 2c       	mov	r15, r3
			if (ch=='l') {
				ch=*(fmt++);
				lng=1;
			}
#endif
			switch (ch) {
 518:	83 36       	cpi	r24, 0x63	; 99
 51a:	09 f4       	brne	.+2      	; 0x51e <__stack+0xbf>
 51c:	76 c0       	rjmp	.+236    	; 0x60a <__stack+0x1ab>
 51e:	50 f4       	brcc	.+20     	; 0x534 <__stack+0xd5>
 520:	85 32       	cpi	r24, 0x25	; 37
 522:	09 f4       	brne	.+2      	; 0x526 <__stack+0xc7>
 524:	8c c0       	rjmp	.+280    	; 0x63e <__stack+0x1df>
 526:	88 35       	cpi	r24, 0x58	; 88
 528:	09 f4       	brne	.+2      	; 0x52c <__stack+0xcd>
 52a:	50 c0       	rjmp	.+160    	; 0x5cc <__stack+0x16d>
 52c:	88 23       	and	r24, r24
 52e:	09 f4       	brne	.+2      	; 0x532 <__stack+0xd3>
 530:	8e c0       	rjmp	.+284    	; 0x64e <__stack+0x1ef>
 532:	89 c0       	rjmp	.+274    	; 0x646 <__stack+0x1e7>
 534:	83 37       	cpi	r24, 0x73	; 115
 536:	09 f4       	brne	.+2      	; 0x53a <__stack+0xdb>
 538:	73 c0       	rjmp	.+230    	; 0x620 <__stack+0x1c1>
 53a:	18 f4       	brcc	.+6      	; 0x542 <__stack+0xe3>
 53c:	84 36       	cpi	r24, 0x64	; 100
 53e:	11 f1       	breq	.+68     	; 0x584 <__stack+0x125>
 540:	82 c0       	rjmp	.+260    	; 0x646 <__stack+0x1e7>
 542:	85 37       	cpi	r24, 0x75	; 117
 544:	21 f0       	breq	.+8      	; 0x54e <__stack+0xef>
 546:	88 37       	cpi	r24, 0x78	; 120
 548:	09 f4       	brne	.+2      	; 0x54c <__stack+0xed>
 54a:	40 c0       	rjmp	.+128    	; 0x5cc <__stack+0x16d>
 54c:	7c c0       	rjmp	.+248    	; 0x646 <__stack+0x1e7>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
 54e:	38 01       	movw	r6, r16
 550:	f2 e0       	ldi	r31, 0x02	; 2
 552:	6f 0e       	add	r6, r31
 554:	71 1c       	adc	r7, r1
 556:	9e 01       	movw	r18, r28
 558:	2f 5f       	subi	r18, 0xFF	; 255
 55a:	3f 4f       	sbci	r19, 0xFF	; 255
 55c:	45 2d       	mov	r20, r5
 55e:	53 2d       	mov	r21, r3
 560:	6a e0       	ldi	r22, 0x0A	; 10
 562:	70 e0       	ldi	r23, 0x00	; 0
 564:	f8 01       	movw	r30, r16
 566:	80 81       	ld	r24, Z
 568:	91 81       	ldd	r25, Z+1	; 0x01
 56a:	0e 94 35 01 	call	0x26a	; 0x26a <ui2a>
					putchw(putp,putf,w,lz,bf);
 56e:	8e 01       	movw	r16, r28
 570:	0f 5f       	subi	r16, 0xFF	; 255
 572:	1f 4f       	sbci	r17, 0xFF	; 255
 574:	24 2d       	mov	r18, r4
 576:	a7 01       	movw	r20, r14
 578:	b5 01       	movw	r22, r10
 57a:	c4 01       	movw	r24, r8
 57c:	0e 94 b0 01 	call	0x360	; 0x360 <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
 580:	83 01       	movw	r16, r6
					putchw(putp,putf,w,lz,bf);
					break;
 582:	61 c0       	rjmp	.+194    	; 0x646 <__stack+0x1e7>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
 584:	38 01       	movw	r6, r16
 586:	f2 e0       	ldi	r31, 0x02	; 2
 588:	6f 0e       	add	r6, r31
 58a:	71 1c       	adc	r7, r1
 58c:	f8 01       	movw	r30, r16
 58e:	80 81       	ld	r24, Z
 590:	91 81       	ldd	r25, Z+1	; 0x01
	*bf=0;
	}

static void i2a (int num, char * bf)
	{
	if (num<0) {
 592:	99 23       	and	r25, r25
 594:	44 f4       	brge	.+16     	; 0x5a6 <__stack+0x147>
		num=-num;
 596:	91 95       	neg	r25
 598:	81 95       	neg	r24
 59a:	91 09       	sbc	r25, r1
		*bf++ = '-';
 59c:	fd e2       	ldi	r31, 0x2D	; 45
 59e:	f9 83       	std	Y+1, r31	; 0x01
 5a0:	2f 85       	ldd	r18, Y+15	; 0x0f
 5a2:	38 89       	ldd	r19, Y+16	; 0x10
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <__stack+0x14b>
	*bf=0;
	}

static void i2a (int num, char * bf)
	{
	if (num<0) {
 5a6:	2d 85       	ldd	r18, Y+13	; 0x0d
 5a8:	3e 85       	ldd	r19, Y+14	; 0x0e
		num=-num;
		*bf++ = '-';
		}
	ui2a(num,10,0,bf);
 5aa:	45 2d       	mov	r20, r5
 5ac:	53 2d       	mov	r21, r3
 5ae:	6a e0       	ldi	r22, 0x0A	; 10
 5b0:	70 e0       	ldi	r23, 0x00	; 0
 5b2:	0e 94 35 01 	call	0x26a	; 0x26a <ui2a>
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
					putchw(putp,putf,w,lz,bf);
 5b6:	8e 01       	movw	r16, r28
 5b8:	0f 5f       	subi	r16, 0xFF	; 255
 5ba:	1f 4f       	sbci	r17, 0xFF	; 255
 5bc:	24 2d       	mov	r18, r4
 5be:	a7 01       	movw	r20, r14
 5c0:	b5 01       	movw	r22, r10
 5c2:	c4 01       	movw	r24, r8
 5c4:	0e 94 b0 01 	call	0x360	; 0x360 <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
 5c8:	83 01       	movw	r16, r6
					putchw(putp,putf,w,lz,bf);
					break;
 5ca:	3d c0       	rjmp	.+122    	; 0x646 <__stack+0x1e7>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 5cc:	38 01       	movw	r6, r16
 5ce:	22 e0       	ldi	r18, 0x02	; 2
 5d0:	62 0e       	add	r6, r18
 5d2:	71 1c       	adc	r7, r1
 5d4:	41 e0       	ldi	r20, 0x01	; 1
 5d6:	52 2d       	mov	r21, r2
 5d8:	88 35       	cpi	r24, 0x58	; 88
 5da:	11 f0       	breq	.+4      	; 0x5e0 <__stack+0x181>
 5dc:	45 2d       	mov	r20, r5
 5de:	53 2d       	mov	r21, r3
 5e0:	9e 01       	movw	r18, r28
 5e2:	2f 5f       	subi	r18, 0xFF	; 255
 5e4:	3f 4f       	sbci	r19, 0xFF	; 255
 5e6:	60 e1       	ldi	r22, 0x10	; 16
 5e8:	70 e0       	ldi	r23, 0x00	; 0
 5ea:	f8 01       	movw	r30, r16
 5ec:	80 81       	ld	r24, Z
 5ee:	91 81       	ldd	r25, Z+1	; 0x01
 5f0:	0e 94 35 01 	call	0x26a	; 0x26a <ui2a>
					putchw(putp,putf,w,lz,bf);
 5f4:	8e 01       	movw	r16, r28
 5f6:	0f 5f       	subi	r16, 0xFF	; 255
 5f8:	1f 4f       	sbci	r17, 0xFF	; 255
 5fa:	24 2d       	mov	r18, r4
 5fc:	a7 01       	movw	r20, r14
 5fe:	b5 01       	movw	r22, r10
 600:	c4 01       	movw	r24, r8
 602:	0e 94 b0 01 	call	0x360	; 0x360 <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 606:	83 01       	movw	r16, r6
					putchw(putp,putf,w,lz,bf);
					break;
 608:	1e c0       	rjmp	.+60     	; 0x646 <__stack+0x1e7>
				case 'c' : 
					putf(putp,(char)(va_arg(va, int)));
 60a:	78 01       	movw	r14, r16
 60c:	f2 e0       	ldi	r31, 0x02	; 2
 60e:	ef 0e       	add	r14, r31
 610:	f1 1c       	adc	r15, r1
 612:	f8 01       	movw	r30, r16
 614:	60 81       	ld	r22, Z
 616:	c4 01       	movw	r24, r8
 618:	f5 01       	movw	r30, r10
 61a:	09 95       	icall
 61c:	87 01       	movw	r16, r14
					break;
 61e:	13 c0       	rjmp	.+38     	; 0x646 <__stack+0x1e7>
				case 's' : 
					putchw(putp,putf,w,0,va_arg(va, char*));
 620:	38 01       	movw	r6, r16
 622:	f2 e0       	ldi	r31, 0x02	; 2
 624:	6f 0e       	add	r6, r31
 626:	71 1c       	adc	r7, r1
 628:	f8 01       	movw	r30, r16
 62a:	00 81       	ld	r16, Z
 62c:	11 81       	ldd	r17, Z+1	; 0x01
 62e:	20 e0       	ldi	r18, 0x00	; 0
 630:	a7 01       	movw	r20, r14
 632:	b5 01       	movw	r22, r10
 634:	c4 01       	movw	r24, r8
 636:	0e 94 b0 01 	call	0x360	; 0x360 <putchw>
 63a:	83 01       	movw	r16, r6
					break;
 63c:	04 c0       	rjmp	.+8      	; 0x646 <__stack+0x1e7>
				case '%' :
					putf(putp,ch);
 63e:	65 e2       	ldi	r22, 0x25	; 37
 640:	c4 01       	movw	r24, r8
 642:	f5 01       	movw	r30, r10
 644:	09 95       	icall
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
 646:	f6 01       	movw	r30, r12
 648:	60 81       	ld	r22, Z
 64a:	61 11       	cpse	r22, r1
 64c:	11 cf       	rjmp	.-478    	; 0x470 <__stack+0x11>
					break;
				}
			}
		}
	abort:;
	}
 64e:	60 96       	adiw	r28, 0x10	; 16
 650:	0f b6       	in	r0, 0x3f	; 63
 652:	f8 94       	cli
 654:	de bf       	out	0x3e, r29	; 62
 656:	0f be       	out	0x3f, r0	; 63
 658:	cd bf       	out	0x3d, r28	; 61
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	1f 91       	pop	r17
 660:	0f 91       	pop	r16
 662:	ff 90       	pop	r15
 664:	ef 90       	pop	r14
 666:	df 90       	pop	r13
 668:	cf 90       	pop	r12
 66a:	bf 90       	pop	r11
 66c:	af 90       	pop	r10
 66e:	9f 90       	pop	r9
 670:	8f 90       	pop	r8
 672:	7f 90       	pop	r7
 674:	6f 90       	pop	r6
 676:	5f 90       	pop	r5
 678:	4f 90       	pop	r4
 67a:	3f 90       	pop	r3
 67c:	2f 90       	pop	r2
 67e:	08 95       	ret

00000680 <init_printf>:


void init_printf(void* putp,void (*putf) (void*,char))
	{
	stdout_putf=putf;
 680:	70 93 72 00 	sts	0x0072, r23	; 0x800072 <stdout_putf+0x1>
 684:	60 93 71 00 	sts	0x0071, r22	; 0x800071 <stdout_putf>
	stdout_putp=putp;
 688:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <stdout_putp+0x1>
 68c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <stdout_putp>
 690:	08 95       	ret

00000692 <tfp_printf>:
	}

void tfp_printf(char *fmt, ...)
	{
 692:	cf 93       	push	r28
 694:	df 93       	push	r29
 696:	cd b7       	in	r28, 0x3d	; 61
 698:	de b7       	in	r29, 0x3e	; 62
 69a:	9e 01       	movw	r18, r28
 69c:	2b 5f       	subi	r18, 0xFB	; 251
 69e:	3f 4f       	sbci	r19, 0xFF	; 255
 6a0:	f9 01       	movw	r30, r18
 6a2:	41 91       	ld	r20, Z+
 6a4:	51 91       	ld	r21, Z+
 6a6:	9f 01       	movw	r18, r30
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
 6a8:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <stdout_putf>
 6ac:	70 91 72 00 	lds	r23, 0x0072	; 0x800072 <stdout_putf+0x1>
 6b0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <stdout_putp>
 6b4:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <stdout_putp+0x1>
 6b8:	0e 94 0d 02 	call	0x41a	; 0x41a <tfp_format>
	va_end(va);
	}
 6bc:	df 91       	pop	r29
 6be:	cf 91       	pop	r28
 6c0:	08 95       	ret

000006c2 <__udivmodhi4>:
 6c2:	aa 1b       	sub	r26, r26
 6c4:	bb 1b       	sub	r27, r27
 6c6:	51 e1       	ldi	r21, 0x11	; 17
 6c8:	07 c0       	rjmp	.+14     	; 0x6d8 <__udivmodhi4_ep>

000006ca <__udivmodhi4_loop>:
 6ca:	aa 1f       	adc	r26, r26
 6cc:	bb 1f       	adc	r27, r27
 6ce:	a6 17       	cp	r26, r22
 6d0:	b7 07       	cpc	r27, r23
 6d2:	10 f0       	brcs	.+4      	; 0x6d8 <__udivmodhi4_ep>
 6d4:	a6 1b       	sub	r26, r22
 6d6:	b7 0b       	sbc	r27, r23

000006d8 <__udivmodhi4_ep>:
 6d8:	88 1f       	adc	r24, r24
 6da:	99 1f       	adc	r25, r25
 6dc:	5a 95       	dec	r21
 6de:	a9 f7       	brne	.-22     	; 0x6ca <__udivmodhi4_loop>
 6e0:	80 95       	com	r24
 6e2:	90 95       	com	r25
 6e4:	bc 01       	movw	r22, r24
 6e6:	cd 01       	movw	r24, r26
 6e8:	08 95       	ret

000006ea <_exit>:
 6ea:	f8 94       	cli

000006ec <__stop_program>:
 6ec:	ff cf       	rjmp	.-2      	; 0x6ec <__stop_program>
