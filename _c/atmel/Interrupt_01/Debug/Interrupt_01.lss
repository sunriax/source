
Interrupt_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000009d  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000006b  00000000  00000000  0000023d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000f7  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000169  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003c  00000000  00000000  0000054d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000589  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_2>:
#define INTERRUPT PORTD	// Interrupt Port
#define PULLUP PORTA	// Pullup Port
#define OUTPUT PORTC	// Output Port

ISR(INT1_vect)			// Externer Interrupt INT1
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
	OUTPUT++;			// Ausgang um 1 erhöhen
  78:	85 b3       	in	r24, 0x15	; 21
  7a:	8f 5f       	subi	r24, 0xFF	; 255
  7c:	85 bb       	out	0x15, r24	; 21
}
  7e:	8f 91       	pop	r24
  80:	0f 90       	pop	r0
  82:	0f be       	out	0x3f, r0	; 63
  84:	0f 90       	pop	r0
  86:	1f 90       	pop	r1
  88:	18 95       	reti

0000008a <main>:

int main(void)
{
	// Portkonfiguration
	DDRIN  &= NHIGH;	// DDRIN unteres Nibble auf (BIT 0-3) Eingang
  8a:	8a b3       	in	r24, 0x1a	; 26
  8c:	80 7f       	andi	r24, 0xF0	; 240
  8e:	8a bb       	out	0x1a, r24	; 26
	PULLUP |= NHIGH;	// PULLUP aus (BIT 0-3) (Pullup an Taster(S0/1/2/3 aktiv)
  90:	8b b3       	in	r24, 0x1b	; 27
  92:	80 6f       	ori	r24, 0xF0	; 240
  94:	8b bb       	out	0x1b, r24	; 27

	OUTPUT  = LOW;		// LEDs an OUTPUT auf Eingang
  96:	15 ba       	out	0x15, r1	; 21
	DDROUT  = HIGH;		// Datenrichtungsregister OUTPUT auf Ausgang
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	84 bb       	out	0x14, r24	; 20

	DDRINT &= HIGH;		// DDRINT auf auf Eingang
  9c:	81 b3       	in	r24, 0x11	; 17
  9e:	81 bb       	out	0x11, r24	; 17
	INTERRUPT |= 0x08;	// PULLUP ein (Bit 3) (Pullup an INT1)
  a0:	93 9a       	sbi	0x12, 3	; 18
	
	// Externe Interrupts Register
	MCUCR |= (1<<ISC11);	// Interrupt INT1 in MCUCR auf auslösen durch fallende Flanke setzen
  a2:	85 b7       	in	r24, 0x35	; 53
  a4:	88 60       	ori	r24, 0x08	; 8
  a6:	85 bf       	out	0x35, r24	; 53
	GICR  |= (1<<INT1);		// Interrupt INT1 freigeben
  a8:	8b b7       	in	r24, 0x3b	; 59
  aa:	80 68       	ori	r24, 0x80	; 128
  ac:	8b bf       	out	0x3b, r24	; 59

	sei();					// Interrupts Global Freigeben
  ae:	78 94       	sei

    while (1) 
    {	
	//	if(INPUT & (1<<0))		// Abfrage ob Taster S0/1/2/3 nicht gedrückt
	//		OUTPUT = 0x0F;
    }
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <main+0x26>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
