
SPI_Master_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000bc  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000008c  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000011f  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000017a  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  000005f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000063f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_10>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_10>:
#define SCK	 PB7						// SPI Taktsignal
#define SS	 PB4						// Slave Select

// SPI Interruptroutine
ISR(SPI_STC_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
  78:	9f 93       	push	r25
	OUTPUT = SPDR;										// Daten aus SPI Datenregister ausgeben
  7a:	8f b1       	in	r24, 0x0f	; 15
  7c:	85 bb       	out	0x15, r24	; 21
	SPDR = (0xF0 & ~(INPUT<<4)) | (0x0F & ~(INPUT));	// Daten in SPI Datenregister schreiebn
  7e:	99 b3       	in	r25, 0x19	; 25
  80:	89 b3       	in	r24, 0x19	; 25
  82:	92 95       	swap	r25
  84:	90 7f       	andi	r25, 0xF0	; 240
  86:	90 95       	com	r25
  88:	90 7f       	andi	r25, 0xF0	; 240
  8a:	80 95       	com	r24
  8c:	8f 70       	andi	r24, 0x0F	; 15
  8e:	89 2b       	or	r24, r25
  90:	8f b9       	out	0x0f, r24	; 15
}
  92:	9f 91       	pop	r25
  94:	8f 91       	pop	r24
  96:	0f 90       	pop	r0
  98:	0f be       	out	0x3f, r0	; 63
  9a:	0f 90       	pop	r0
  9c:	1f 90       	pop	r1
  9e:	18 95       	reti

000000a0 <SPI_MasterInit>:

// SPI Initialisierungsroutine
void SPI_MasterInit()
{
	DDRSPI = (1<<MOSI) | (1<<SCK);	// SCK, MOSI als Ausgang
  a0:	80 ea       	ldi	r24, 0xA0	; 160
  a2:	87 bb       	out	0x17, r24	; 23
	SPIPUT = (1<<MISO) | (1<<SS);	// MISO, SS Pullup aktivieren
  a4:	80 e5       	ldi	r24, 0x50	; 80
  a6:	88 bb       	out	0x18, r24	; 24

	SPCR = (1<<MSTR) | (1<<SPR1);	// Interrupt individuell freigeben,
  a8:	82 e1       	ldi	r24, 0x12	; 18
  aa:	8d b9       	out	0x0d, r24	; 13
									// Masterbetrieb aktivieren
									// Vorteiler auf 64
	
	SPCR |= (1<<SPE);				// SPI einschalten
  ac:	6e 9a       	sbi	0x0d, 6	; 13
  ae:	08 95       	ret

000000b0 <main>:
}

// Hauptprogramm
int main(void)
{
	DDRIN = LOW;		// Datenrichtungsregister auf Eingang
  b0:	1a ba       	out	0x1a, r1	; 26
	INPORT = HIGH;		// Pullups an Eingang einschalten
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	8b bb       	out	0x1b, r24	; 27
	
	DDROUT = HIGH;		// Datenrichtungsregister auf Ausgang
  b6:	84 bb       	out	0x14, r24	; 20
	OUTPUT = LOW;		// Alle LEDs ausschalten
  b8:	15 ba       	out	0x15, r1	; 21
	
	SPI_MasterInit();	// SPI Initialisierung
  ba:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_MasterInit>
	
	SPCR |= (1<<SPIE);	// Interrupt Individuell freigeben
  be:	6f 9a       	sbi	0x0d, 7	; 13
	SPDR = LOW;			// Dummy Schreibforgang auf SPI Datenregister
  c0:	1f b8       	out	0x0f, r1	; 15
	
	sei();				// Interrupt global freigeben
  c2:	78 94       	sei
	
    while (1) 
    {
    }
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <main+0x14>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
