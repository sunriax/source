
Drehgeber_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000014a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000b3  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000081  00000000  00000000  00000293  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000107  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000161  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  000005c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000005fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_2>:
										// (nicht benötigt da max. Schrittzahl 250)
volatile static unsigned char pos;		// Positionsvariable 0-255

// INT1 ISR für Winkelcodierer (CLK=1)
ISR(INT1_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
	if(INTPUT & (1<<DIR))				// Überprüfen ob Linksdrehung
  88:	84 9b       	sbis	0x10, 4	; 16
  8a:	06 c0       	rjmp	.+12     	; 0x98 <__vector_2+0x1c>
		pos--;							// Hochzählen
  8c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  90:	81 50       	subi	r24, 0x01	; 1
  92:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  96:	07 c0       	rjmp	.+14     	; 0xa6 <__vector_2+0x2a>
	else if(!(INTPUT & (1<<DIR)))		// Überprüfen ob Rechtsdrehung
  98:	84 99       	sbic	0x10, 4	; 16
  9a:	05 c0       	rjmp	.+10     	; 0xa6 <__vector_2+0x2a>
		pos++;							// Runterzählen
  9c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  a0:	8f 5f       	subi	r24, 0xFF	; 255
  a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
  a6:	8f 91       	pop	r24
  a8:	0f 90       	pop	r0
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	0f 90       	pop	r0
  ae:	1f 90       	pop	r1
  b0:	18 95       	reti

000000b2 <main>:

int main(void)
{
	// I/O Einstellungen
	DDRINT  = LOW;	// Richtungsregister (DDR*(D)) auf Eingang
  b2:	11 ba       	out	0x11, r1	; 17
	DDROUT  = HIGH;	// Richtungsregister (DDR*(C)) auf Ausgang
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	84 bb       	out	0x14, r24	; 20
	INTPULL = HIGH;	// Pullup an (PORT*(D)) auf HIGH
  b8:	82 bb       	out	0x12, r24	; 18
	OUTPUT  = LOW;	// Ausgang (PORT(*C)) LOW, alle LEDs aus
  ba:	15 ba       	out	0x15, r1	; 21

	// Externe Interrupt Einstellungen
	MCUCR |= (1<<ISC11) | (1<<ISC10);	// Interrupt INT1 (auslösen durch steigende Flanke)
  bc:	85 b7       	in	r24, 0x35	; 53
  be:	8c 60       	ori	r24, 0x0C	; 12
  c0:	85 bf       	out	0x35, r24	; 53
	GICR  |= (1<<INT1);					// Interrupt INT1 freigeben
  c2:	8b b7       	in	r24, 0x3b	; 59
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	8b bf       	out	0x3b, r24	; 59

	sei();					// Globale Interruptfreigabe
  c8:	78 94       	sei

    while (1)
    {
		// Variable pos auf LCD Display ausgeben
		OUTPUT = pos;			// Ausgabe der Variable pos auf Ausgang(LEDs)
  ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  ce:	85 bb       	out	0x15, r24	; 21
    }
  d0:	fc cf       	rjmp	.-8      	; 0xca <main+0x18>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
