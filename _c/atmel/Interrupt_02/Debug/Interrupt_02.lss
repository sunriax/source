
Interrupt_02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000087  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000053  00000000  00000000  00000203  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000dd  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000015e  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000004b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4b 00 	jmp	0x96	; 0x96 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define OUTPUT PORTC	// Output Port

int main(void)
{
	// Register Einstellungen
	DDRIN = LOW;	// Datenrichtungsregister auf Eingang (PORTA)
  6c:	1a ba       	out	0x1a, r1	; 26
	DDRINT  = LOW;	// Interruptregister auf Eingang (PORTD)
  6e:	11 ba       	out	0x11, r1	; 17
	DDROUT = HIGH;	// Datenrichtungsregister auf Ausgang (PORTC)
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	84 bb       	out	0x14, r24	; 20

	// I/O Einstellungen
	INTPULL = HIGH;	// Pullups an Interrupteingang (PORTD) aktiv
  74:	82 bb       	out	0x12, r24	; 18
	OUTPUT = LOW;	// Alles LEDs an PORTC auf LOW
  76:	15 ba       	out	0x15, r1	; 21

	// Externe Interrupts Register
	MCUCR |= (1<<ISC11);	// Interrupt INT1 in MCUCR auf auslösen durch fallende Flanke setzen
  78:	85 b7       	in	r24, 0x35	; 53
  7a:	88 60       	ori	r24, 0x08	; 8
  7c:	85 bf       	out	0x35, r24	; 53
	GICR  |= (1<<INT1);		// Interrupt INT1 freigeben
  7e:	8b b7       	in	r24, 0x3b	; 59
  80:	80 68       	ori	r24, 0x80	; 128
  82:	8b bf       	out	0x3b, r24	; 59
    while (1) 
    {
		if(GIFR & (1<<INTF1))	// Überprüfen ob INTERRUPT Flag INTF1 gesetzt
		{
			OUTPUT++;			// Ausgang (PORTC) um 1 erhöhen
			GIFR = (1<<INTF1);	// INT1 Flag rücksetzen (Rücksetzen erfolgt durch schreiben von HIGH auf GIFR)
  84:	90 e8       	ldi	r25, 0x80	; 128
	// nicht benötigt da ISR nicht ausgeführt wird!
	// sei();					// Interrupts Global Freigeben

    while (1) 
    {
		if(GIFR & (1<<INTF1))	// Überprüfen ob INTERRUPT Flag INTF1 gesetzt
  86:	0a b6       	in	r0, 0x3a	; 58
  88:	07 fe       	sbrs	r0, 7
  8a:	fd cf       	rjmp	.-6      	; 0x86 <main+0x1a>
		{
			OUTPUT++;			// Ausgang (PORTC) um 1 erhöhen
  8c:	85 b3       	in	r24, 0x15	; 21
  8e:	8f 5f       	subi	r24, 0xFF	; 255
  90:	85 bb       	out	0x15, r24	; 21
			GIFR = (1<<INTF1);	// INT1 Flag rücksetzen (Rücksetzen erfolgt durch schreiben von HIGH auf GIFR)
  92:	9a bf       	out	0x3a, r25	; 58
  94:	f8 cf       	rjmp	.-16     	; 0x86 <main+0x1a>

00000096 <_exit>:
  96:	f8 94       	cli

00000098 <__stop_program>:
  98:	ff cf       	rjmp	.-2      	; 0x98 <__stop_program>
