
Speicherklassen_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  0000012a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000e1  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000ab  00000000  00000000  000002a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000f3  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000172  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000005e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 48 00 	call	0x90	; 0x90 <main>
  74:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <test>:
  static unsigned char x; // Zählvariable, lokal in Funktion test() gültig, 
  //unsigned char x=0; // Zählvariable, lokal in Funktion test() gültig, 
                        // statisch im SRAM angelegt, Startwert Null
                        // Inhalt von x bleibt nach Ausstieg aus test() erhalten

  a_global=0xee;   // globale Variable modifizieren und in SRAM ablegen
  7c:	8e ee       	ldi	r24, 0xEE	; 238
  7e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <a_global>
  PORTB = ++x;	   // Zählvariable inkrementieren und in SRAM ablegen (x lokal vereinbart!)
  82:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  86:	8f 5f       	subi	r24, 0xFF	; 255
  88:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  8c:	88 bb       	out	0x18, r24	; 24
  8e:	08 95       	ret

00000090 <main>:
int main(void)	// Beginn Block "main" 
{ 
  while(1) // Beginn Block "Arbeitschleife"
  { 
	
	a_global=1; // globale Variable ändern
  90:	c1 e0       	ldi	r28, 0x01	; 1
	            // globaler Wert von x unverändert
	
	x = a_global; // globale variable x:=0xee
	
	if (x == 0xee) PORTD=0x11; 
	else PORTD = 0xFF; // SPEICHERTEST für SRAM-Zellen "x" und "a_global"
  92:	df ef       	ldi	r29, 0xFF	; 255
	            // a_global verändert (neuer Wert: 0xee); 
	            // globaler Wert von x unverändert
	
	x = a_global; // globale variable x:=0xee
	
	if (x == 0xee) PORTD=0x11; 
  94:	11 e1       	ldi	r17, 0x11	; 17
int main(void)	// Beginn Block "main" 
{ 
  while(1) // Beginn Block "Arbeitschleife"
  { 
	
	a_global=1; // globale Variable ändern
  96:	c0 93 62 00 	sts	0x0062, r28	; 0x800062 <a_global>
	
	test();		// Funktionsaufruf
  9a:	0e 94 3e 00 	call	0x7c	; 0x7c <test>
	            // a_global verändert (neuer Wert: 0xee); 
	            // globaler Wert von x unverändert
	
	x = a_global; // globale variable x:=0xee
  9e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <a_global>
  a2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <x>
	
	if (x == 0xee) PORTD=0x11; 
  a6:	8e 3e       	cpi	r24, 0xEE	; 238
  a8:	11 f4       	brne	.+4      	; 0xae <main+0x1e>
  aa:	12 bb       	out	0x12, r17	; 18
  ac:	f4 cf       	rjmp	.-24     	; 0x96 <main+0x6>
	else PORTD = 0xFF; // SPEICHERTEST für SRAM-Zellen "x" und "a_global"
  ae:	d2 bb       	out	0x12, r29	; 18
  b0:	f2 cf       	rjmp	.-28     	; 0x96 <main+0x6>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
