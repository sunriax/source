
Taster_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000098  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000011c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000087  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000053  00000000  00000000  000001ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000cb  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000015b  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000049f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4a 00 	jmp	0x94	; 0x94 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
	// ######### INIT ########
	// Register einstellen
	DDROUT |= 0xFF;		// DDRx auf HIGH (BIT 0-7) (Ausgang)
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	84 bb       	out	0x14, r24	; 20
	DDRIN &= 0xF0;		// DDRx auf LOW  (BIT 0-3) (Eingang)
  72:	8a b3       	in	r24, 0x1a	; 26
  74:	80 7f       	andi	r24, 0xF0	; 240
  76:	8a bb       	out	0x1a, r24	; 26

	// Pullup am Eingang
	PULLUP |= 0x0F;		// PORTX auf HIGH (BIT 0-3) (Pullup aktiv)
  78:	8b b3       	in	r24, 0x1b	; 27
  7a:	8f 60       	ori	r24, 0x0F	; 15
  7c:	8b bb       	out	0x1b, r24	; 27
	
	// Ausgänge auf Low
	OUTPUT &= 0x00;		// PORTx auf LOW  (BIT 0-7) (Ausgang) 
  7e:	85 b3       	in	r24, 0x15	; 21
  80:	15 ba       	out	0x15, r1	; 21

	// ######### RUN #########
    while (1) 
    {
		if(!(INPUT & (0x01)))		// Abfrage ob Taster S0 gedrückt
  82:	c8 99       	sbic	0x19, 0	; 25
  84:	02 c0       	rjmp	.+4      	; 0x8a <main+0x1e>
			OUTPUT |= 0x01;			// PortX(0) HIGH = LED ein
  86:	a8 9a       	sbi	0x15, 0	; 21
  88:	fc cf       	rjmp	.-8      	; 0x82 <main+0x16>
		else if(!(INPUT & (0x02)))	// Abfrage ob Taster S1 gedrückt
  8a:	c9 99       	sbic	0x19, 1	; 25
  8c:	fa cf       	rjmp	.-12     	; 0x82 <main+0x16>
			OUTPUT &= 0x00;			// PortX(0) LOW = LED aus
  8e:	85 b3       	in	r24, 0x15	; 21
  90:	15 ba       	out	0x15, r1	; 21
  92:	f7 cf       	rjmp	.-18     	; 0x82 <main+0x16>

00000094 <_exit>:
  94:	f8 94       	cli

00000096 <__stop_program>:
  96:	ff cf       	rjmp	.-2      	; 0x96 <__stop_program>
